From c611a07832769718fee6e5226fa8e98132c8916f Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Tue, 7 Nov 2023 18:43:47 -0600
Subject: [PATCH 01/40] Add support for emoji reactions Squashed, modified, and
 rebased from glitch-soc/mastodon#2221.

Co-authored-by: fef <owo@fef.moe>
Co-authored-by: Jeremy Kescher <jeremy@kescher.at>
Co-authored-by: neatchee <neatchee@gmail.com>
Co-authored-by: Ivan Rodriguez <104603218+IRod22@users.noreply.github.com>
Co-authored-by: Plastikmensch <plastikmensch@users.noreply.github.com>
---
 .env.production.sample                        |   3 +
 .../api/v1/statuses/reactions_controller.rb   |  31 ++++
 .../flavours/glitch/actions/interactions.js   |  82 ++++++++
 .../flavours/glitch/components/status.jsx     |  17 +-
 .../glitch/components/status_action_bar.jsx   |  30 ++-
 .../glitch/components/status_prepend.jsx      |  13 ++
 .../glitch/components/status_reactions.jsx    | 175 ++++++++++++++++++
 .../glitch/containers/status_container.js     |  10 +
 .../components/emoji_picker_dropdown.jsx      |   3 +-
 .../notifications/components/notification.jsx |  27 +++
 .../features/status/components/action_bar.jsx |  31 +++-
 .../status/components/detailed_status.tsx     |  15 ++
 .../flavours/glitch/features/status/index.jsx |  18 ++
 .../flavours/glitch/initial_state.js          |   5 +
 .../flavours/glitch/locales/en.json           |   4 +
 .../flavours/glitch/reducers/settings.js      |   3 +
 .../flavours/glitch/reducers/statuses.js      |  50 +++++
 .../flavours/glitch/styles/components.scss    |   9 +
 .../400-24px/add_reaction-fill.svg            |   1 +
 .../material-icons/400-24px/add_reaction.svg  |   1 +
 app/lib/activitypub/activity.rb               |  30 +++
 app/lib/activitypub/activity/emoji_react.rb   |  26 +++
 app/lib/activitypub/activity/like.rb          |  28 ++-
 app/lib/activitypub/activity/undo.rb          |  27 +++
 app/models/concerns/account/associations.rb   |   1 +
 app/models/concerns/account/interactions.rb   |   4 +
 app/models/concerns/user/has_settings.rb      |  14 ++
 app/models/notification.rb                    |  12 +-
 app/models/status.rb                          |  16 ++
 app/models/status_reaction.rb                 |  33 ++++
 app/models/user_settings.rb                   |   1 +
 app/policies/status_policy.rb                 |   4 +
 .../activitypub/emoji_reaction_serializer.rb  |  39 ++++
 .../undo_emoji_reaction_serializer.rb         |  19 ++
 app/serializers/initial_state_serializer.rb   |  15 +-
 app/serializers/rest/instance_serializer.rb   |   4 +
 .../rest/notification_serializer.rb           |   2 +-
 app/serializers/rest/reaction_serializer.rb   |  14 ++
 app/serializers/rest/status_serializer.rb     |   5 +
 .../rest/v1/instance_serializer.rb            |   4 +
 app/services/react_service.rb                 |  31 ++++
 app/services/unreact_service.rb               |  23 +++
 app/validators/status_reaction_validator.rb   |  28 +++
 .../preferences/appearance/show.html.haml     |   3 +
 app/workers/unreact_worker.rb                 |  11 ++
 config/locales-glitch/en.yml                  |   5 +
 config/locales-glitch/simple_form.en.yml      |   1 +
 config/routes/api.rb                          |   5 +
 config/settings.yml                           |   1 +
 .../20221124114030_create_status_reactions.rb |  16 ++
 ...0215074425_move_emoji_reaction_settings.rb |  49 +++++
 db/schema.rb                                  |  15 ++
 .../fabricators/status_reaction_fabricator.rb |   8 +
 spec/models/status_reaction_spec.rb           |   3 +
 54 files changed, 1014 insertions(+), 11 deletions(-)
 create mode 100644 app/controllers/api/v1/statuses/reactions_controller.rb
 create mode 100644 app/javascript/flavours/glitch/components/status_reactions.jsx
 create mode 100644 app/javascript/material-icons/400-24px/add_reaction-fill.svg
 create mode 100644 app/javascript/material-icons/400-24px/add_reaction.svg
 create mode 100644 app/lib/activitypub/activity/emoji_react.rb
 create mode 100644 app/models/status_reaction.rb
 create mode 100644 app/serializers/activitypub/emoji_reaction_serializer.rb
 create mode 100644 app/serializers/activitypub/undo_emoji_reaction_serializer.rb
 create mode 100644 app/services/react_service.rb
 create mode 100644 app/services/unreact_service.rb
 create mode 100644 app/validators/status_reaction_validator.rb
 create mode 100644 app/workers/unreact_worker.rb
 create mode 100644 db/migrate/20221124114030_create_status_reactions.rb
 create mode 100644 db/migrate/20230215074425_move_emoji_reaction_settings.rb
 create mode 100644 spec/fabricators/status_reaction_fabricator.rb
 create mode 100644 spec/models/status_reaction_spec.rb

diff --git a/.env.production.sample b/.env.production.sample
index f687053d502403..9c9746fd58c84e 100644
--- a/.env.production.sample
+++ b/.env.production.sample
@@ -283,6 +283,9 @@ MAX_POLL_OPTIONS=5
 # Maximum allowed poll option characters
 MAX_POLL_OPTION_CHARS=100
 
+# Maximum number of emoji reactions per toot and user (minimum 1)
+MAX_REACTIONS=1
+
 # Maximum image and video/audio upload sizes
 # Units are in bytes
 # 1048576 bytes equals 1 megabyte
diff --git a/app/controllers/api/v1/statuses/reactions_controller.rb b/app/controllers/api/v1/statuses/reactions_controller.rb
new file mode 100644
index 00000000000000..2d7e4f59846220
--- /dev/null
+++ b/app/controllers/api/v1/statuses/reactions_controller.rb
@@ -0,0 +1,31 @@
+# frozen_string_literal: true
+
+class Api::V1::Statuses::ReactionsController < Api::BaseController
+  include Authorization
+
+  before_action -> { doorkeeper_authorize! :write, :'write:favourites' }
+  before_action :require_user!
+  before_action :set_status
+
+  def create
+    ReactService.new.call(current_account, @status, params[:id])
+    render json: @status, serializer: REST::StatusSerializer
+  end
+
+  def destroy
+    UnreactWorker.perform_async(current_account.id, @status.id, params[:id])
+
+    render json: @status, serializer: REST::StatusSerializer, relationships: StatusRelationshipsPresenter.new([@status], current_account.id, reactions_map: { @status.id => false })
+  rescue Mastodon::NotPermittedError
+    not_found
+  end
+
+  private
+
+  def set_status
+    @status = Status.find(params[:status_id])
+    authorize @status, :show?
+  rescue Mastodon::NotPermittedError
+    not_found
+  end
+end
diff --git a/app/javascript/flavours/glitch/actions/interactions.js b/app/javascript/flavours/glitch/actions/interactions.js
index 92142d782c1c90..725e29985d577b 100644
--- a/app/javascript/flavours/glitch/actions/interactions.js
+++ b/app/javascript/flavours/glitch/actions/interactions.js
@@ -47,6 +47,16 @@ export const UNBOOKMARK_REQUEST = 'UNBOOKMARKED_REQUEST';
 export const UNBOOKMARK_SUCCESS = 'UNBOOKMARKED_SUCCESS';
 export const UNBOOKMARK_FAIL    = 'UNBOOKMARKED_FAIL';
 
+export const REACTION_UPDATE = 'REACTION_UPDATE';
+
+export const REACTION_ADD_REQUEST = 'REACTION_ADD_REQUEST';
+export const REACTION_ADD_SUCCESS = 'REACTION_ADD_SUCCESS';
+export const REACTION_ADD_FAIL    = 'REACTION_ADD_FAIL';
+
+export const REACTION_REMOVE_REQUEST = 'REACTION_REMOVE_REQUEST';
+export const REACTION_REMOVE_SUCCESS = 'REACTION_REMOVE_SUCCESS';
+export const REACTION_REMOVE_FAIL    = 'REACTION_REMOVE_FAIL';
+
 export * from "./interactions_typed";
 
 export function favourite(status) {
@@ -494,3 +504,75 @@ export function toggleFavourite(statusId, skipModal = false) {
     }
   };
 }
+
+export const addReaction = (statusId, name, url) => (dispatch, getState) => {
+  const status = getState().get('statuses').get(statusId);
+  let alreadyAdded = false;
+  if (status) {
+    const reaction = status.get('reactions').find(x => x.get('name') === name);
+    if (reaction && reaction.get('me')) {
+      alreadyAdded = true;
+    }
+  }
+  if (!alreadyAdded) {
+    dispatch(addReactionRequest(statusId, name, url));
+  }
+
+  // encodeURIComponent is required for the Keycap Number Sign emoji, see:
+  // <https://github.com/glitch-soc/mastodon/pull/1980#issuecomment-1345538932>
+  api(getState).post(`/api/v1/statuses/${statusId}/react/${encodeURIComponent(name)}`).then(() => {
+    dispatch(addReactionSuccess(statusId, name));
+  }).catch(err => {
+    if (!alreadyAdded) {
+      dispatch(addReactionFail(statusId, name, err));
+    }
+  });
+};
+
+export const addReactionRequest = (statusId, name, url) => ({
+  type: REACTION_ADD_REQUEST,
+  id: statusId,
+  name,
+  url,
+});
+
+export const addReactionSuccess = (statusId, name) => ({
+  type: REACTION_ADD_SUCCESS,
+  id: statusId,
+  name,
+});
+
+export const addReactionFail = (statusId, name, error) => ({
+  type: REACTION_ADD_FAIL,
+  id: statusId,
+  name,
+  error,
+});
+
+export const removeReaction = (statusId, name) => (dispatch, getState) => {
+  dispatch(removeReactionRequest(statusId, name));
+
+  api(getState).post(`/api/v1/statuses/${statusId}/unreact/${encodeURIComponent(name)}`).then(() => {
+    dispatch(removeReactionSuccess(statusId, name));
+  }).catch(err => {
+    dispatch(removeReactionFail(statusId, name, err));
+  });
+};
+
+export const removeReactionRequest = (statusId, name) => ({
+  type: REACTION_REMOVE_REQUEST,
+  id: statusId,
+  name,
+});
+
+export const removeReactionSuccess = (statusId, name) => ({
+  type: REACTION_REMOVE_SUCCESS,
+  id: statusId,
+  name,
+});
+
+export const removeReactionFail = (statusId, name) => ({
+  type: REACTION_REMOVE_FAIL,
+  id: statusId,
+  name,
+});
diff --git a/app/javascript/flavours/glitch/components/status.jsx b/app/javascript/flavours/glitch/components/status.jsx
index b1c6fbb4ce33a2..d98efe33700f17 100644
--- a/app/javascript/flavours/glitch/components/status.jsx
+++ b/app/javascript/flavours/glitch/components/status.jsx
@@ -20,7 +20,7 @@ import Card from '../features/status/components/card';
 import Bundle from '../features/ui/components/bundle';
 import { MediaGallery, Video, Audio } from '../features/ui/util/async-components';
 import { SensitiveMediaContext } from '../features/ui/util/sensitive_media_context';
-import { displayMedia } from '../initial_state';
+import { displayMedia, visibleReactions } from '../initial_state';
 
 import AttachmentList from './attachment_list';
 import { Avatar } from './avatar';
@@ -33,6 +33,7 @@ import StatusActionBar from './status_action_bar';
 import StatusContent from './status_content';
 import StatusIcons from './status_icons';
 import StatusPrepend from './status_prepend';
+import StatusReactions from './status_reactions';
 
 const domParser = new DOMParser();
 
@@ -94,6 +95,8 @@ class Status extends ImmutablePureComponent {
     onDelete: PropTypes.func,
     onDirect: PropTypes.func,
     onMention: PropTypes.func,
+    onReactionAdd: PropTypes.func,
+    onReactionRemove: PropTypes.func,
     onPin: PropTypes.func,
     onOpenMedia: PropTypes.func,
     onOpenVideo: PropTypes.func,
@@ -364,7 +367,7 @@ class Status extends ImmutablePureComponent {
       this.props.onClick();
       return;
     }
-    
+
     const { history } = this.props;
     const status = this.props.status;
 
@@ -645,6 +648,7 @@ class Status extends ImmutablePureComponent {
     if (this.props.prepend && account) {
       const notifKind = {
         favourite: 'favourited',
+        reaction: 'reacted',
         reblog: 'boosted',
         reblogged_by: 'boosted',
         status: 'posted',
@@ -745,6 +749,15 @@ class Status extends ImmutablePureComponent {
             {/* This is a glitch-soc addition to have a placeholder */}
             {!expanded && <MentionsPlaceholder status={status} />}
 
+            <StatusReactions
+              statusId={status.get('id')}
+              reactions={status.get('reactions')}
+              numVisible={visibleReactions}
+              addReaction={this.props.onReactionAdd}
+              removeReaction={this.props.onReactionRemove}
+              canReact={this.context.identity.signedIn}
+            />
+
             {!isQuotedPost &&
               <StatusActionBar
                 status={status}
diff --git a/app/javascript/flavours/glitch/components/status_action_bar.jsx b/app/javascript/flavours/glitch/components/status_action_bar.jsx
index 3232498204a77d..c8d99fd623c031 100644
--- a/app/javascript/flavours/glitch/components/status_action_bar.jsx
+++ b/app/javascript/flavours/glitch/components/status_action_bar.jsx
@@ -8,6 +8,7 @@ import { withRouter } from 'react-router-dom';
 import ImmutablePropTypes from 'react-immutable-proptypes';
 import ImmutablePureComponent from 'react-immutable-pure-component';
 
+import AddReactionIcon from '@/material-icons/400-24px/add_reaction.svg?react';
 import BookmarkIcon from '@/material-icons/400-24px/bookmark-fill.svg?react';
 import BookmarkBorderIcon from '@/material-icons/400-24px/bookmark.svg?react';
 import MoreHorizIcon from '@/material-icons/400-24px/more_horiz.svg?react';
@@ -27,7 +28,8 @@ import { accountAdminLink, statusAdminLink } from 'flavours/glitch/utils/backend
 import { WithRouterPropTypes } from 'flavours/glitch/utils/react_router';
 
 import { Dropdown } from 'flavours/glitch/components/dropdown_menu';
-import { me } from '../initial_state';
+import EmojiPickerDropdown from '../features/compose/containers/emoji_picker_dropdown_container';
+import { me, maxReactions } from '../initial_state';
 
 import { IconButton } from './icon_button';
 import { RelativeTimestamp } from './relative_timestamp';
@@ -49,6 +51,7 @@ const messages = defineMessages({
   cancel_reblog_private: { id: 'status.cancel_reblog_private', defaultMessage: 'Unboost' },
   cannot_reblog: { id: 'status.cannot_reblog', defaultMessage: 'This post cannot be boosted' },
   favourite: { id: 'status.favourite', defaultMessage: 'Favorite' },
+  react: { id: 'status.react', defaultMessage: 'React' },
   removeFavourite: { id: 'status.remove_favourite', defaultMessage: 'Remove from favorites' },
   bookmark: { id: 'status.bookmark', defaultMessage: 'Bookmark' },
   removeBookmark: { id: 'status.remove_bookmark', defaultMessage: 'Remove bookmark' },
@@ -75,6 +78,7 @@ class StatusActionBar extends ImmutablePureComponent {
     status: ImmutablePropTypes.map.isRequired,
     onReply: PropTypes.func,
     onFavourite: PropTypes.func,
+    onReactionAdd: PropTypes.func,
     onReblog: PropTypes.func,
     onDelete: PropTypes.func,
     onDirect: PropTypes.func,
@@ -132,6 +136,10 @@ class StatusActionBar extends ImmutablePureComponent {
     }
   };
 
+  handleEmojiPick = data => {
+    this.props.onReactionAdd(this.props.status.get('id'), data.native.replace(/:/g, ''), data.imageUrl);
+  };
+
   handleReblogClick = e => {
     const { signedIn } = this.props.identity;
 
@@ -207,6 +215,8 @@ class StatusActionBar extends ImmutablePureComponent {
     this.props.onAddFilter(this.props.status);
   };
 
+  handleNoOp = () => {}; // hack for reaction add button
+
   render () {
     const { status, intl, withDismiss, withCounters, showReplyCount, scrollKey } = this.props;
     const { permissions, signedIn } = this.props.identity;
@@ -322,6 +332,17 @@ class StatusActionBar extends ImmutablePureComponent {
       </div>
     );
 
+    const canReact = permissions && status.get('reactions').filter(r => r.get('count') > 0 && r.get('me')).size < maxReactions;
+    const reactButton = (
+      <IconButton
+        className='status__action-bar-button'
+        onClick={this.handleNoOp} // EmojiPickerDropdown handles that
+        title={intl.formatMessage(messages.react)}
+        disabled={!canReact}
+        icon='add_reaction'
+        iconComponent={AddReactionIcon}
+      />
+    );
     const bookmarkTitle = intl.formatMessage(status.get('bookmarked') ? messages.removeBookmark : messages.bookmark);
     const favouriteTitle = intl.formatMessage(status.get('favourited') ? messages.removeFavourite : messages.favourite);
 
@@ -344,6 +365,13 @@ class StatusActionBar extends ImmutablePureComponent {
         <div className='status__action-bar__button-wrapper'>
           <IconButton className='status__action-bar-button star-icon' animate active={status.get('favourited')} title={favouriteTitle} icon='star' iconComponent={status.get('favourited') ? StarIcon : StarBorderIcon} onClick={this.handleFavouriteClick} counter={withCounters ? status.get('favourites_count') : undefined} />
         </div>
+        <div className='status__action-bar__button-wrapper'>
+          {
+            permissions
+              ? <EmojiPickerDropdown className='status__action-bar-button' onPickEmoji={this.handleEmojiPick} button={reactButton} disabled={!canReact} />
+              : reactButton
+          }
+        </div>
         <div className='status__action-bar__button-wrapper'>
           <IconButton className='status__action-bar-button bookmark-icon' disabled={!signedIn} active={status.get('bookmarked')} title={bookmarkTitle} icon='bookmark' iconComponent={status.get('bookmarked') ? BookmarkIcon : BookmarkBorderIcon} onClick={this.handleBookmarkClick} />
         </div>
diff --git a/app/javascript/flavours/glitch/components/status_prepend.jsx b/app/javascript/flavours/glitch/components/status_prepend.jsx
index 60dd0a4ce752ed..8c5b51bfcdea7c 100644
--- a/app/javascript/flavours/glitch/components/status_prepend.jsx
+++ b/app/javascript/flavours/glitch/components/status_prepend.jsx
@@ -6,6 +6,7 @@ import { FormattedMessage } from 'react-intl';
 
 import ImmutablePropTypes from 'react-immutable-proptypes';
 
+import AddReactionIcon from '@/material-icons/400-24px/add_reaction.svg?react';
 import EditIcon from '@/material-icons/400-24px/edit.svg?react';
 import HomeIcon from '@/material-icons/400-24px/home-fill.svg?react';
 import InsertChartIcon from '@/material-icons/400-24px/insert_chart.svg?react';
@@ -61,6 +62,14 @@ export default class StatusPrepend extends PureComponent {
           values={{ name : link }}
         />
       );
+    case 'reaction':
+      return (
+        <FormattedMessage
+          id='notification.reaction'
+          defaultMessage='{name} reacted to your status'
+          values={{ name: link }}
+        />
+      );
     case 'reblog':
       return (
         <FormattedMessage
@@ -116,6 +125,10 @@ export default class StatusPrepend extends PureComponent {
       iconId = 'star';
       iconComponent = StarIcon;
       break;
+    case 'reaction':
+      iconId = 'add_reaction';
+      iconComponent = AddReactionIcon;
+      break;
     case 'featured':
       iconId = 'thumb-tack';
       iconComponent = PushPinIcon;
diff --git a/app/javascript/flavours/glitch/components/status_reactions.jsx b/app/javascript/flavours/glitch/components/status_reactions.jsx
new file mode 100644
index 00000000000000..e3ae79958b4084
--- /dev/null
+++ b/app/javascript/flavours/glitch/components/status_reactions.jsx
@@ -0,0 +1,175 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import classNames from 'classnames';
+
+import ImmutablePropTypes from 'react-immutable-proptypes';
+import ImmutablePureComponent from 'react-immutable-pure-component';
+
+import TransitionMotion from 'react-motion/lib/TransitionMotion';
+import spring from 'react-motion/lib/spring';
+
+import { unicodeMapping } from '../features/emoji/emoji_unicode_mapping_light';
+import { autoPlayGif, reduceMotion } from '../initial_state';
+import { assetHost } from '../utils/config';
+
+import { AnimatedNumber } from './animated_number';
+
+export default class StatusReactions extends ImmutablePureComponent {
+
+  static propTypes = {
+    statusId: PropTypes.string.isRequired,
+    reactions: ImmutablePropTypes.list.isRequired,
+    numVisible: PropTypes.number,
+    addReaction: PropTypes.func.isRequired,
+    canReact: PropTypes.bool.isRequired,
+    removeReaction: PropTypes.func.isRequired,
+  };
+
+  willEnter() {
+    return { scale: reduceMotion ? 1 : 0 };
+  }
+
+  willLeave() {
+    return { scale: reduceMotion ? 0 : spring(0, { stiffness: 170, damping: 26 }) };
+  }
+
+  render() {
+    const { reactions, numVisible } = this.props;
+    let visibleReactions = reactions
+      .filter(x => x.get('count') > 0)
+      .sort((a, b) => b.get('count') - a.get('count'));
+
+    if (numVisible >= 0) {
+      visibleReactions = visibleReactions.filter((_, i) => i < numVisible);
+    }
+
+    const styles = visibleReactions.map(reaction => ({
+      key: reaction.get('name'),
+      data: reaction,
+      style: { scale: reduceMotion ? 1 : spring(1, { stiffness: 150, damping: 13 }) },
+    })).toArray();
+
+    return (
+      <TransitionMotion styles={styles} willEnter={this.willEnter} willLeave={this.willLeave}>
+        {items => (
+          <div className={classNames('reactions-bar', { 'reactions-bar--empty': visibleReactions.isEmpty() })}>
+            {items.map(({ key, data, style }) => (
+              <Reaction
+                key={key}
+                statusId={this.props.statusId}
+                reaction={data}
+                style={{ transform: `scale(${style.scale})`, position: style.scale < 0.5 ? 'absolute' : 'static' }}
+                addReaction={this.props.addReaction}
+                removeReaction={this.props.removeReaction}
+                canReact={this.props.canReact}
+              />
+            ))}
+          </div>
+        )}
+      </TransitionMotion>
+    );
+  }
+
+}
+
+class Reaction extends ImmutablePureComponent {
+
+  static propTypes = {
+    statusId: PropTypes.string,
+    reaction: ImmutablePropTypes.map.isRequired,
+    addReaction: PropTypes.func.isRequired,
+    removeReaction: PropTypes.func.isRequired,
+    canReact: PropTypes.bool.isRequired,
+    style: PropTypes.object,
+  };
+
+  state = {
+    hovered: false,
+  };
+
+  handleClick = () => {
+    const { reaction, statusId, addReaction, removeReaction } = this.props;
+
+    if (reaction.get('me')) {
+      removeReaction(statusId, reaction.get('name'));
+    } else {
+      addReaction(statusId, reaction.get('name'));
+    }
+  }
+
+  handleMouseEnter = () => this.setState({ hovered: true })
+
+  handleMouseLeave = () => this.setState({ hovered: false })
+
+  render() {
+    const { reaction } = this.props;
+
+    return (
+      <button
+        className={classNames('reactions-bar__item', { active: reaction.get('me') })}
+        onClick={this.handleClick}
+        onMouseEnter={this.handleMouseEnter}
+        onMouseLeave={this.handleMouseLeave}
+        disabled={!this.props.canReact}
+        style={this.props.style}
+      >
+        <span className='reactions-bar__item__emoji'>
+          <Emoji
+            hovered={this.state.hovered}
+            emoji={reaction.get('name')}
+            url={reaction.get('url')}
+            staticUrl={reaction.get('static_url')}
+          />
+        </span>
+        <span className='reactions-bar__item__count'>
+          <AnimatedNumber value={reaction.get('count')} />
+        </span>
+      </button>
+    );
+  }
+
+}
+
+class Emoji extends React.PureComponent {
+
+  static propTypes = {
+    emoji: PropTypes.string.isRequired,
+    hovered: PropTypes.bool.isRequired,
+    url: PropTypes.string,
+    staticUrl: PropTypes.string,
+  };
+
+  render() {
+    const { emoji, hovered, url, staticUrl } = this.props;
+
+    if (unicodeMapping[emoji]) {
+      const { filename, shortCode } = unicodeMapping[this.props.emoji];
+      const title = shortCode ? `:${shortCode}:` : '';
+
+      return (
+        <img
+          draggable='false'
+          className='emojione'
+          alt={emoji}
+          title={title}
+          src={`${assetHost}/emoji/${filename}.svg`}
+        />
+      );
+    } else {
+      const filename = (autoPlayGif || hovered) ? url : staticUrl;
+      const shortCode = `:${emoji}:`;
+
+      return (
+        <img
+          draggable='false'
+          className='emojione custom-emoji'
+          alt={shortCode}
+          title={shortCode}
+          src={filename}
+        />
+      );
+    }
+  }
+
+}
diff --git a/app/javascript/flavours/glitch/containers/status_container.js b/app/javascript/flavours/glitch/containers/status_container.js
index 3b292102e13ddb..2d6023e510a253 100644
--- a/app/javascript/flavours/glitch/containers/status_container.js
+++ b/app/javascript/flavours/glitch/containers/status_container.js
@@ -16,6 +16,8 @@ import {
   unbookmark,
   pin,
   unpin,
+  addReaction,
+  removeReaction,
 } from 'flavours/glitch/actions/interactions';
 import { openModal } from 'flavours/glitch/actions/modal';
 import { initMuteModal } from 'flavours/glitch/actions/mutes';
@@ -104,6 +106,14 @@ const mapDispatchToProps = (dispatch, { contextType }) => ({
     }
   },
 
+  onReactionAdd (statusId, name, url) {
+    dispatch(addReaction(statusId, name, url));
+  },
+
+  onReactionRemove (statusId, name) {
+    dispatch(removeReaction(statusId, name));
+  },
+
   onEmbed (status) {
     dispatch(openModal({
       modalType: 'EMBED',
diff --git a/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx b/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx
index ee565390a3a127..0c449cfa89ec3e 100644
--- a/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx
+++ b/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx
@@ -318,6 +318,7 @@ class EmojiPickerDropdown extends PureComponent {
     onPickEmoji: PropTypes.func.isRequired,
     onSkinTone: PropTypes.func.isRequired,
     skinTone: PropTypes.number.isRequired,
+    disabled: PropTypes.bool,
   };
 
   state = {
@@ -352,7 +353,7 @@ class EmojiPickerDropdown extends PureComponent {
   };
 
   onToggle = (e) => {
-    if (!this.state.loading && (!e.key || e.key === 'Enter')) {
+    if (!this.state.disabled && !this.state.loading && (!e.key || e.key === 'Enter')) {
       if (this.state.active) {
         this.onHideDropdown();
       } else {
diff --git a/app/javascript/flavours/glitch/features/notifications/components/notification.jsx b/app/javascript/flavours/glitch/features/notifications/components/notification.jsx
index a2ed5841351069..9cc605ba631a58 100644
--- a/app/javascript/flavours/glitch/features/notifications/components/notification.jsx
+++ b/app/javascript/flavours/glitch/features/notifications/components/notification.jsx
@@ -204,6 +204,31 @@ class Notification extends ImmutablePureComponent {
     );
   }
 
+  renderReaction (notification) {
+    return (
+      <StatusContainer
+        containerId={notification.get('id')}
+        hidden={!!this.props.hidden}
+        id={notification.get('status')}
+        account={notification.get('account')}
+        prepend='reaction'
+        muted
+        withDismiss
+        notification={notification}
+        onMoveDown={this.handleMoveDown}
+        onMoveUp={this.handleMoveUp}
+        onMention={this.props.onMention}
+        contextType='notifications'
+        getScrollPosition={this.props.getScrollPosition}
+        updateScrollBottom={this.props.updateScrollBottom}
+        cachedMediaWidth={this.props.cachedMediaWidth}
+        cacheMediaWidth={this.props.cacheMediaWidth}
+        onUnmount={this.props.onUnmount}
+        unread={this.props.unread}
+      />
+    );
+  }
+
   renderReblog (notification) {
     return (
       <StatusQuoteManager
@@ -433,6 +458,8 @@ class Notification extends ImmutablePureComponent {
       return this.renderMention(notification);
     case 'favourite':
       return this.renderFavourite(notification);
+    case 'reaction':
+      return this.renderReaction(notification);
     case 'reblog':
       return this.renderReblog(notification);
     case 'status':
diff --git a/app/javascript/flavours/glitch/features/status/components/action_bar.jsx b/app/javascript/flavours/glitch/features/status/components/action_bar.jsx
index d0657512b748a8..572167d285b046 100644
--- a/app/javascript/flavours/glitch/features/status/components/action_bar.jsx
+++ b/app/javascript/flavours/glitch/features/status/components/action_bar.jsx
@@ -7,6 +7,7 @@ import classNames from 'classnames';
 
 import ImmutablePropTypes from 'react-immutable-proptypes';
 
+import AddReactionIcon from '@/material-icons/400-24px/add_reaction.svg?react';
 import BookmarkIcon from '@/material-icons/400-24px/bookmark-fill.svg?react';
 import BookmarkBorderIcon from '@/material-icons/400-24px/bookmark.svg?react';
 import MoreHorizIcon from '@/material-icons/400-24px/more_horiz.svg?react';
@@ -25,7 +26,8 @@ import { accountAdminLink, statusAdminLink } from 'flavours/glitch/utils/backend
 
 import { IconButton } from '../../../components/icon_button';
 import { Dropdown } from 'flavours/glitch/components/dropdown_menu';
-import { me } from '../../../initial_state';
+import { me, maxReactions } from '../../../initial_state';
+import EmojiPickerDropdown from '../../compose/containers/emoji_picker_dropdown_container';
 
 const messages = defineMessages({
   delete: { id: 'status.delete', defaultMessage: 'Delete' },
@@ -39,6 +41,7 @@ const messages = defineMessages({
   cancel_reblog_private: { id: 'status.cancel_reblog_private', defaultMessage: 'Unboost' },
   cannot_reblog: { id: 'status.cannot_reblog', defaultMessage: 'This post cannot be boosted' },
   favourite: { id: 'status.favourite', defaultMessage: 'Favorite' },
+  react: { id: 'status.react', defaultMessage: 'React' },
   removeFavourite: { id: 'status.remove_favourite', defaultMessage: 'Remove from favorites' },
   bookmark: { id: 'status.bookmark', defaultMessage: 'Bookmark' },
   removeBookmark: { id: 'status.remove_bookmark', defaultMessage: 'Remove bookmark' },
@@ -66,6 +69,7 @@ class ActionBar extends PureComponent {
     onReply: PropTypes.func.isRequired,
     onReblog: PropTypes.func.isRequired,
     onFavourite: PropTypes.func.isRequired,
+    onReactionAdd: PropTypes.func.isRequired,
     onBookmark: PropTypes.func.isRequired,
     onDelete: PropTypes.func.isRequired,
     onEdit: PropTypes.func.isRequired,
@@ -92,6 +96,10 @@ class ActionBar extends PureComponent {
     this.props.onFavourite(this.props.status, e);
   };
 
+  handleEmojiPick = data => {
+    this.props.onReactionAdd(this.props.status.get('id'), data.native.replace(/:/g, ''), data.imageUrl);
+  };
+
   handleBookmarkClick = (e) => {
     this.props.onBookmark(this.props.status, e);
   };
@@ -151,6 +159,8 @@ class ActionBar extends PureComponent {
     navigator.clipboard.writeText(url);
   };
 
+  handleNoOp = () => {}; // hack for reaction add button
+
   render () {
     const { status, intl } = this.props;
     const { signedIn, permissions } = this.props.identity;
@@ -227,6 +237,18 @@ class ActionBar extends PureComponent {
       replyIconComponent = ReplyAllIcon;
     }
 
+    const canReact = signedIn && status.get('reactions').filter(r => r.get('count') > 0 && r.get('me')).size < maxReactions;
+    const reactButton = (
+      <IconButton
+        className='plus-icon'
+        onClick={this.handleNoOp} // EmojiPickerDropdown handles that
+        title={intl.formatMessage(messages.react)}
+        disabled={!canReact}
+        icon='add_reaction'
+        iconComponent={AddReactionIcon}
+      />
+    );
+
     const reblogPrivate = status.getIn(['account', 'id']) === me && status.get('visibility') === 'private';
 
     let reblogTitle, reblogIconComponent;
@@ -253,6 +275,13 @@ class ActionBar extends PureComponent {
         <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.reply)} icon={replyIcon} iconComponent={replyIconComponent} onClick={this.handleReplyClick} /></div>
         <div className='detailed-status__button'><IconButton className={classNames({ reblogPrivate })} disabled={!publicStatus && !reblogPrivate} active={status.get('reblogged')} title={reblogTitle} icon='retweet' iconComponent={reblogIconComponent} onClick={this.handleReblogClick} /></div>
         <div className='detailed-status__button'><IconButton className='star-icon' animate active={status.get('favourited')} title={favouriteTitle} icon='star' iconComponent={status.get('favourited') ? StarIcon : StarBorderIcon} onClick={this.handleFavouriteClick} /></div>
+        <div className='detailed-status__button'>
+          {
+            signedIn
+              ? <EmojiPickerDropdown onPickEmoji={this.handleEmojiPick} button={reactButton} disabled={!canReact} />
+              : reactButton
+          }
+        </div>
         <div className='detailed-status__button'><IconButton className='bookmark-icon' disabled={!signedIn} active={status.get('bookmarked')} title={bookmarkTitle} icon='bookmark' iconComponent={status.get('bookmarked') ? BookmarkIcon : BookmarkBorderIcon} onClick={this.handleBookmarkClick} /></div>
 
         <div className='detailed-status__action-bar-dropdown'>
diff --git a/app/javascript/flavours/glitch/features/status/components/detailed_status.tsx b/app/javascript/flavours/glitch/features/status/components/detailed_status.tsx
index 9e772837e17c92..55cceab01c2972 100644
--- a/app/javascript/flavours/glitch/features/status/components/detailed_status.tsx
+++ b/app/javascript/flavours/glitch/features/status/components/detailed_status.tsx
@@ -28,10 +28,12 @@ import { Permalink } from 'flavours/glitch/components/permalink';
 import { PictureInPicturePlaceholder } from 'flavours/glitch/components/picture_in_picture_placeholder';
 import StatusContent from 'flavours/glitch/components/status_content';
 import { QuotedStatus } from 'flavours/glitch/components/status_quoted';
+import StatusReactions from 'flavours/glitch/components/status_reactions';
 import { VisibilityIcon } from 'flavours/glitch/components/visibility_icon';
 import { Audio } from 'flavours/glitch/features/audio';
 import scheduleIdleTask from 'flavours/glitch/features/ui/util/schedule_idle_task';
 import { Video } from 'flavours/glitch/features/video';
+import { useIdentity } from 'flavours/glitch/identity_context';
 import { useAppSelector } from 'flavours/glitch/store';
 
 import Card from './card';
@@ -56,6 +58,8 @@ export const DetailedStatus: React.FC<{
   pictureInPicture: any;
   onToggleHidden?: (status: any) => void;
   onToggleMediaVisibility?: () => void;
+  onReactionAdd?: (status: any, name: string, url: string) => void;
+  onReactionRemove?: (status: any, name: string) => void;
   expanded: boolean;
 }> = ({
   status,
@@ -71,12 +75,15 @@ export const DetailedStatus: React.FC<{
   pictureInPicture,
   onToggleMediaVisibility,
   onToggleHidden,
+  onReactionAdd,
+  onReactionRemove,
   expanded,
 }) => {
   const properStatus = status?.get('reblog') ?? status;
   const [height, setHeight] = useState(0);
   const [showDespiteFilter, setShowDespiteFilter] = useState(false);
   const nodeRef = useRef<HTMLDivElement>();
+  const { signedIn } = useIdentity();
 
   const rewriteMentions = useAppSelector(
     (state) => state.local_settings.get('rewrite_mentions', false) as boolean,
@@ -426,6 +433,14 @@ export const DetailedStatus: React.FC<{
         {/* This is a glitch-soc addition to have a placeholder */}
         {!expanded && <MentionsPlaceholder status={status} />}
 
+        <StatusReactions
+          statusId={status.get('id')}
+          reactions={status.get('reactions')}
+          addReaction={onReactionAdd}
+          removeReaction={onReactionRemove}
+          canReact={signedIn}
+        />
+
         <div className='detailed-status__meta'>
           <div className='detailed-status__meta__line'>
             <a
diff --git a/app/javascript/flavours/glitch/features/status/index.jsx b/app/javascript/flavours/glitch/features/status/index.jsx
index 37cf4c9be5914a..ffe72428c5a100 100644
--- a/app/javascript/flavours/glitch/features/status/index.jsx
+++ b/app/javascript/flavours/glitch/features/status/index.jsx
@@ -37,6 +37,8 @@ import {
   toggleReblog,
   pin,
   unpin,
+  addReaction,
+  removeReaction,
 } from '../../actions/interactions';
 import { openModal } from '../../actions/modal';
 import { initMuteModal } from '../../actions/mutes';
@@ -224,6 +226,19 @@ class Status extends ImmutablePureComponent {
     }
   };
 
+  handleReactionAdd = (statusId, name, url) => {
+    const { dispatch } = this.props;
+    const { signedIn } = this.context.identity;
+
+    if (signedIn) {
+      dispatch(addReaction(statusId, name, url));
+    }
+  };
+
+  handleReactionRemove = (statusId, name) => {
+    this.props.dispatch(removeReaction(statusId, name));
+  };
+
   handlePin = (status) => {
     if (status.get('pinned')) {
       this.props.dispatch(unpin(status));
@@ -655,6 +670,8 @@ class Status extends ImmutablePureComponent {
                   settings={settings}
                   onOpenVideo={this.handleOpenVideo}
                   onOpenMedia={this.handleOpenMedia}
+                  onReactionAdd={this.handleReactionAdd}
+                  onReactionRemove={this.handleReactionRemove}
                   expanded={isExpanded}
                   onToggleHidden={this.handleToggleHidden}
                   onTranslate={this.handleTranslate}
@@ -669,6 +686,7 @@ class Status extends ImmutablePureComponent {
                   status={status}
                   onReply={this.handleReplyClick}
                   onFavourite={this.handleFavouriteClick}
+                  onReactionAdd={this.handleReactionAdd}
                   onReblog={this.handleReblogClick}
                   onBookmark={this.handleBookmarkClick}
                   onDelete={this.handleDeleteClick}
diff --git a/app/javascript/flavours/glitch/initial_state.js b/app/javascript/flavours/glitch/initial_state.js
index 9332b7ebc6fb6b..deb887e8f4067b 100644
--- a/app/javascript/flavours/glitch/initial_state.js
+++ b/app/javascript/flavours/glitch/initial_state.js
@@ -26,6 +26,7 @@
  * @property {boolean} limited_federation_mode
  * @property {string} locale
  * @property {string | null} mascot
+ * @property {number} max_reactions
  * @property {string=} me
  * @property {string=} moved_to_account_id
  * @property {string=} owner
@@ -46,6 +47,7 @@
  * @property {boolean} use_blurhash
  * @property {boolean=} use_pending_items
  * @property {string} version
+ * @property {number} visible_reactions
  * @property {string} sso_redirect
  * @property {string} status_page_url
  * @property {boolean} terms_of_service_enabled
@@ -72,6 +74,7 @@
  * @property {object} local_settings
  * @property {number} max_feed_hashtags
  * @property {number} poll_limits
+ * @property {number} max_reactions
  */
 
 const element = document.getElementById('initial-state');
@@ -118,6 +121,7 @@ export const expandSpoilers = getMeta('expand_spoilers');
 export const forceSingleColumn = !getMeta('advanced_layout');
 export const limitedFederationMode = getMeta('limited_federation_mode');
 export const mascot = getMeta('mascot');
+export const maxReactions = (initialState && initialState.max_reactions) || 1;
 export const me = getMeta('me');
 export const movedToAccountId = getMeta('moved_to_account_id');
 export const owner = getMeta('owner');
@@ -136,6 +140,7 @@ export const trendsAsLanding = getMeta('trends_as_landing_page');
 export const useBlurhash = getMeta('use_blurhash');
 export const usePendingItems = getMeta('use_pending_items');
 export const version = getMeta('version');
+export const visibleReactions = getMeta('visible_reactions');
 export const criticalUpdatesPending = initialState?.critical_updates_pending;
 export const statusPageUrl = getMeta('status_page_url');
 export const sso_redirect = getMeta('sso_redirect');
diff --git a/app/javascript/flavours/glitch/locales/en.json b/app/javascript/flavours/glitch/locales/en.json
index 71ac1d26db7edd..4251d2ccfeb568 100644
--- a/app/javascript/flavours/glitch/locales/en.json
+++ b/app/javascript/flavours/glitch/locales/en.json
@@ -47,7 +47,10 @@
   "navigation_bar.app_settings": "App settings",
   "navigation_bar.keyboard_shortcuts": "Keyboard shortcuts",
   "navigation_bar.misc": "Misc",
+  "notification.reaction": "{name} reacted to your post",
   "notifications.column_settings.filter_bar.show_bar": "Show filter bar",
+  "notifications.column_settings.reaction": "Reactions:",
+  "notifications.filter.reactions": "Reactions",
   "settings.always_show_spoilers_field": "Always enable the Content Warning field",
   "settings.close": "Close",
   "settings.compose_box_opts": "Compose box",
@@ -120,5 +123,6 @@
   "status.in_reply_to": "This toot is a reply",
   "status.is_poll": "This toot is a poll",
   "status.local_only": "Only visible from your instance",
+  "status.react": "React",
   "status.show_filter_reason": "Show anyway"
 }
diff --git a/app/javascript/flavours/glitch/reducers/settings.js b/app/javascript/flavours/glitch/reducers/settings.js
index 65e086ff267dd8..ab8452952eb801 100644
--- a/app/javascript/flavours/glitch/reducers/settings.js
+++ b/app/javascript/flavours/glitch/reducers/settings.js
@@ -36,6 +36,7 @@ const initialState = ImmutableMap({
       follow: false,
       follow_request: false,
       favourite: false,
+      reaction: false,
       reblog: false,
       mention: false,
       poll: false,
@@ -59,6 +60,7 @@ const initialState = ImmutableMap({
       follow: true,
       follow_request: false,
       favourite: true,
+      reaction: true,
       reblog: true,
       mention: true,
       poll: true,
@@ -72,6 +74,7 @@ const initialState = ImmutableMap({
       follow: true,
       follow_request: false,
       favourite: true,
+      reaction: true,
       reblog: true,
       mention: true,
       poll: true,
diff --git a/app/javascript/flavours/glitch/reducers/statuses.js b/app/javascript/flavours/glitch/reducers/statuses.js
index c2d88b13d15e14..1734bf13fdd29e 100644
--- a/app/javascript/flavours/glitch/reducers/statuses.js
+++ b/app/javascript/flavours/glitch/reducers/statuses.js
@@ -13,6 +13,11 @@ import {
   BOOKMARK_FAIL,
   UNBOOKMARK_REQUEST,
   UNBOOKMARK_FAIL,
+  REACTION_UPDATE,
+  REACTION_ADD_FAIL,
+  REACTION_REMOVE_FAIL,
+  REACTION_ADD_REQUEST,
+  REACTION_REMOVE_REQUEST,
 } from '../actions/interactions';
 import {
   reblog,
@@ -43,6 +48,43 @@ const deleteStatus = (state, id, references) => {
   return state.delete(id);
 };
 
+const updateReaction = (state, id, name, updater) => state.update(
+  id,
+  status => status.update(
+    'reactions',
+    reactions => {
+      const index = reactions.findIndex(reaction => reaction.get('name') === name);
+      if (index > -1) {
+        return reactions.update(index, reaction => updater(reaction));
+      } else {
+        return reactions.push(updater(fromJS({ name, count: 0 })));
+      }
+    },
+  ),
+);
+
+const updateReactionCount = (state, reaction) => updateReaction(state, reaction.status_id, reaction.name, x => x.set('count', reaction.count));
+
+// The url parameter is only used when adding a new custom emoji reaction
+// (one that wasn't in the reactions list before) because we don't have its
+// URL yet.  In all other cases, it's undefined.
+const addReaction = (state, id, name, url) => updateReaction(
+  state,
+  id,
+  name,
+  x => x.set('me', true)
+    .update('count', n => n + 1)
+    .update('url', old => old ? old : url)
+    .update('static_url', old => old ? old : url),
+);
+
+const removeReaction = (state, id, name) => updateReaction(
+  state,
+  id,
+  name,
+  x => x.set('me', false).update('count', n => n - 1),
+);
+
 const statusTranslateSuccess = (state, id, translation) => {
   return state.withMutations(map => {
     map.setIn([id, 'translation'], fromJS(normalizeStatusTranslation(translation, map.get(id))));
@@ -95,6 +137,14 @@ export default function statuses(state = initialState, action) {
     return state.get(action.status.get('id')) === undefined ? state : state.setIn([action.status.get('id'), 'bookmarked'], false);
   case UNBOOKMARK_FAIL:
     return state.get(action.status.get('id')) === undefined ? state : state.setIn([action.status.get('id'), 'bookmarked'], true);
+  case REACTION_UPDATE:
+    return updateReactionCount(state, action.reaction);
+  case REACTION_ADD_REQUEST:
+  case REACTION_REMOVE_FAIL:
+    return addReaction(state, action.id, action.name, action.url);
+  case REACTION_REMOVE_REQUEST:
+  case REACTION_ADD_FAIL:
+    return removeReaction(state, action.id, action.name);
   case STATUS_MUTE_SUCCESS:
     return state.setIn([action.id, 'muted'], true);
   case STATUS_UNMUTE_SUCCESS:
diff --git a/app/javascript/flavours/glitch/styles/components.scss b/app/javascript/flavours/glitch/styles/components.scss
index 421ffbada3eb7f..b89c428550adeb 100644
--- a/app/javascript/flavours/glitch/styles/components.scss
+++ b/app/javascript/flavours/glitch/styles/components.scss
@@ -1565,6 +1565,7 @@ body > [data-popper-placement] {
 
     .status__content,
     .status__action-bar,
+    .reactions-bar,
     .media-gallery,
     .video-player,
     .audio-player,
@@ -1803,6 +1804,10 @@ body > [data-popper-placement] {
   &-spacer {
     flex-grow: 1;
   }
+
+  & > .emoji-picker-dropdown > .emoji-button {
+    padding: 0;
+  }
 }
 
 .detailed-status__action-bar-dropdown {
@@ -4863,6 +4868,10 @@ a.status-card {
   text-align: center;
 }
 
+.detailed-status__button .emoji-button {
+  padding: 0;
+}
+
 .column-settings {
   display: flex;
   flex-direction: column;
diff --git a/app/javascript/material-icons/400-24px/add_reaction-fill.svg b/app/javascript/material-icons/400-24px/add_reaction-fill.svg
new file mode 100644
index 00000000000000..3ea1c30a525580
--- /dev/null
+++ b/app/javascript/material-icons/400-24px/add_reaction-fill.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="M800-680v-80h-80v-80h80v-80h80v80h80v80h-80v80h-80ZM620-520q25 0 42.5-17.5T680-580q0-25-17.5-42.5T620-640q-25 0-42.5 17.5T560-580q0 25 17.5 42.5T620-520Zm-280 0q25 0 42.5-17.5T400-580q0-25-17.5-42.5T340-640q-25 0-42.5 17.5T280-580q0 25 17.5 42.5T340-520Zm140 260q68 0 123.5-38.5T684-400H276q25 63 80.5 101.5T480-260Zm0 180q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q43 0 83 8.5t77 24.5v167h80v80h142q9 29 13.5 58.5T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Z"/></svg>
\ No newline at end of file
diff --git a/app/javascript/material-icons/400-24px/add_reaction.svg b/app/javascript/material-icons/400-24px/add_reaction.svg
new file mode 100644
index 00000000000000..77aace24b0c684
--- /dev/null
+++ b/app/javascript/material-icons/400-24px/add_reaction.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="M480-480Zm0 400q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q43 0 83 8.5t77 24.5v90q-35-20-75.5-31.5T480-800q-133 0-226.5 93.5T160-480q0 133 93.5 226.5T480-160q133 0 226.5-93.5T800-480q0-32-6.5-62T776-600h86q9 29 13.5 58.5T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm320-600v-80h-80v-80h80v-80h80v80h80v80h-80v80h-80ZM620-520q25 0 42.5-17.5T680-580q0-25-17.5-42.5T620-640q-25 0-42.5 17.5T560-580q0 25 17.5 42.5T620-520Zm-280 0q25 0 42.5-17.5T400-580q0-25-17.5-42.5T340-640q-25 0-42.5 17.5T280-580q0 25 17.5 42.5T340-520Zm140 260q68 0 123.5-38.5T684-400H276q25 63 80.5 101.5T480-260Z"/></svg>
\ No newline at end of file
diff --git a/app/lib/activitypub/activity.rb b/app/lib/activitypub/activity.rb
index 93b45e80188807..6e1ba1ae55c930 100644
--- a/app/lib/activitypub/activity.rb
+++ b/app/lib/activitypub/activity.rb
@@ -39,6 +39,8 @@ def klass
         ActivityPub::Activity::Follow
       when 'Like'
         ActivityPub::Activity::Like
+      when 'EmojiReact'
+        ActivityPub::Activity::EmojiReact
       when 'Block'
         ActivityPub::Activity::Block
       when 'Update'
@@ -173,4 +175,32 @@ def reject_payload!
     Rails.logger.info("Rejected #{@json['type']} activity #{@json['id']} from #{@account.uri}#{@options[:relayed_through_actor] && "via #{@options[:relayed_through_actor].uri}"}")
     nil
   end
+
+  # Ensure emoji declared in the activity's tags are
+  # present in the database and downloaded to the local cache.
+  # Required by EmojiReact and Like for emoji reactions.
+  def process_emoji_tags(name, tags)
+    tag = as_array(tags).find { |item| item['type'] == 'Emoji' }
+    return if tag.nil?
+
+    custom_emoji_parser = ActivityPub::Parser::CustomEmojiParser.new(tag)
+    return if custom_emoji_parser.shortcode.blank? || custom_emoji_parser.image_remote_url.blank? || !name.eql?(custom_emoji_parser.shortcode)
+
+    emoji = CustomEmoji.find_by(shortcode: custom_emoji_parser.shortcode, domain: @account.domain)
+    return emoji unless emoji.nil? ||
+                        custom_emoji_parser.image_remote_url != emoji.image_remote_url ||
+                        (custom_emoji_parser.updated_at && custom_emoji_parser.updated_at >= emoji.updated_at)
+
+    begin
+      emoji ||= CustomEmoji.new(domain: @account.domain,
+                                shortcode: custom_emoji_parser.shortcode,
+                                uri: custom_emoji_parser.uri)
+      emoji.image_remote_url = custom_emoji_parser.image_remote_url
+      emoji.save
+    rescue Seahorse::Client::NetworkingError => e
+      Rails.logger.warn "Error fetching emoji: #{e}"
+      return
+    end
+    emoji
+  end
 end
diff --git a/app/lib/activitypub/activity/emoji_react.rb b/app/lib/activitypub/activity/emoji_react.rb
new file mode 100644
index 00000000000000..c9d88bc51c2605
--- /dev/null
+++ b/app/lib/activitypub/activity/emoji_react.rb
@@ -0,0 +1,26 @@
+# frozen_string_literal: true
+
+class ActivityPub::Activity::EmojiReact < ActivityPub::Activity
+  def perform
+    original_status = status_from_uri(object_uri)
+    name = @json['content']
+    return if original_status.nil? ||
+              !original_status.account.local? ||
+              delete_arrived_first?(@json['id'])
+
+    if /^:.*:$/.match?(name)
+      name.delete! ':'
+      custom_emoji = process_emoji_tags(name, @json['tag'])
+
+      return if custom_emoji.nil?
+    end
+
+    return if @account.reacted?(original_status, name, custom_emoji)
+
+    reaction = original_status.status_reactions.create!(account: @account, name: name, custom_emoji: custom_emoji)
+
+    LocalNotificationWorker.perform_async(original_status.account_id, reaction.id, 'StatusReaction', 'reaction')
+  rescue ActiveRecord::RecordInvalid
+    nil
+  end
+end
diff --git a/app/lib/activitypub/activity/like.rb b/app/lib/activitypub/activity/like.rb
index aa1dc304035a22..86d70e0d70822a 100644
--- a/app/lib/activitypub/activity/like.rb
+++ b/app/lib/activitypub/activity/like.rb
@@ -3,12 +3,38 @@
 class ActivityPub::Activity::Like < ActivityPub::Activity
   def perform
     original_status = status_from_uri(object_uri)
+    return if original_status.nil? || !original_status.account.local? || delete_arrived_first?(@json['id'])
 
-    return if original_status.nil? || !original_status.account.local? || delete_arrived_first?(@json['id']) || @account.favourited?(original_status)
+    return if maybe_process_misskey_reaction
+
+    return if @account.favourited?(original_status)
 
     favourite = original_status.favourites.create!(account: @account)
 
     LocalNotificationWorker.perform_async(original_status.account_id, favourite.id, 'Favourite', 'favourite')
     Trends.statuses.register(original_status)
   end
+
+  # Misskey delivers reactions as likes with the emoji in _misskey_reaction
+  # see https://misskey-hub.net/ns.html#misskey-reaction for details
+  def maybe_process_misskey_reaction
+    original_status = status_from_uri(object_uri)
+    name = @json['_misskey_reaction']
+    return false if name.nil?
+
+    if /^:.*:$/.match?(name)
+      name.delete! ':'
+      custom_emoji = process_emoji_tags(name, @json['tag'])
+
+      return false if custom_emoji.nil? # invalid custom emoji, treat it as a regular like
+    end
+    return true if @account.reacted?(original_status, name, custom_emoji)
+
+    reaction = original_status.status_reactions.create!(account: @account, name: name, custom_emoji: custom_emoji)
+    LocalNotificationWorker.perform_async(original_status.account_id, reaction.id, 'StatusReaction', 'reaction')
+    true
+  # account tried to react with disabled custom emoji. Returning true to discard activity.
+  rescue ActiveRecord::RecordInvalid
+    true
+  end
 end
diff --git a/app/lib/activitypub/activity/undo.rb b/app/lib/activitypub/activity/undo.rb
index 9eff1b71c9db36..5efcfdc99f2d49 100644
--- a/app/lib/activitypub/activity/undo.rb
+++ b/app/lib/activitypub/activity/undo.rb
@@ -11,6 +11,8 @@ def perform
       undo_follow
     when 'Like'
       undo_like
+    when 'EmojiReact'
+      undo_emoji_react
     when 'Block'
       undo_block
     when nil
@@ -108,6 +110,31 @@ def undo_like
     if @account.favourited?(status)
       favourite = status.favourites.where(account: @account).first
       favourite&.destroy
+    elsif @object['_misskey_reaction'].present?
+      undo_emoji_react
+    else
+      delete_later!(object_uri)
+    end
+  end
+
+  def undo_emoji_react
+    name = @object['content'] || @object['_misskey_reaction']
+    return if name.nil?
+
+    status = status_from_uri(target_uri)
+
+    return if status.nil? || !status.account.local?
+
+    if /^:.*:$/.match?(name)
+      name.delete! ':'
+      custom_emoji = process_emoji_tags(name, @object['tag'])
+
+      return if custom_emoji.nil?
+    end
+
+    if @account.reacted?(status, name, custom_emoji)
+      reaction = status.status_reactions.where(account: @account, name: name).first
+      reaction&.destroy
     else
       delete_later!(object_uri)
     end
diff --git a/app/models/concerns/account/associations.rb b/app/models/concerns/account/associations.rb
index cafb2d151c1064..bd87169b2360d0 100644
--- a/app/models/concerns/account/associations.rb
+++ b/app/models/concerns/account/associations.rb
@@ -30,6 +30,7 @@ module Account::Associations
         has_many :reports
         has_many :scheduled_statuses
         has_many :status_pins
+        has_many :status_reactions
         has_many :statuses
 
         has_one :deletion_request, class_name: 'AccountDeletionRequest'
diff --git a/app/models/concerns/account/interactions.rb b/app/models/concerns/account/interactions.rb
index 33d51abed9f0a0..4d104711e8509d 100644
--- a/app/models/concerns/account/interactions.rb
+++ b/app/models/concerns/account/interactions.rb
@@ -238,6 +238,10 @@ def favourited?(status)
     status.proper.favourites.exists?(account: self)
   end
 
+  def reacted?(status, name, custom_emoji = nil)
+    status.proper.status_reactions.where(account: self, name: name, custom_emoji: custom_emoji).exists?
+  end
+
   def bookmarked?(status)
     status.proper.bookmarks.exists?(account: self)
   end
diff --git a/app/models/concerns/user/has_settings.rb b/app/models/concerns/user/has_settings.rb
index 99ad25c276c4a5..54be826e0829f3 100644
--- a/app/models/concerns/user/has_settings.rb
+++ b/app/models/concerns/user/has_settings.rb
@@ -127,6 +127,10 @@ def setting_hide_followers_count
     settings['hide_followers_count']
   end
 
+  def setting_visible_reactions
+    integer_cast_setting('visible_reactions', 0)
+  end
+
   def allows_report_emails?
     settings['notification_emails.report']
   end
@@ -170,4 +174,14 @@ def show_all_media?
   def hide_all_media?
     settings['web.display_media'] == 'hide_all'
   end
+
+  def integer_cast_setting(key, min = nil, max = nil)
+    i = ActiveModel::Type::Integer.new.cast(settings[key])
+    # the cast above doesn't return a number if passed the string "e"
+    i = 0 unless i.is_a? Numeric
+    return min if !min.nil? && i < min
+    return max if !max.nil? && i > max
+
+    i
+  end
 end
diff --git a/app/models/notification.rb b/app/models/notification.rb
index e7ada3399aa495..fbf2ede63a5e7e 100644
--- a/app/models/notification.rb
+++ b/app/models/notification.rb
@@ -29,6 +29,7 @@ class Notification < ApplicationRecord
     'Follow' => :follow,
     'FollowRequest' => :follow_request,
     'Favourite' => :favourite,
+    'StatusReaction' => :reaction,
     'Poll' => :poll,
   }.freeze
 
@@ -52,6 +53,9 @@ class Notification < ApplicationRecord
     favourite: {
       filterable: true,
     }.freeze,
+    reaction: {
+      filterable: true,
+    }.freeze,
     poll: {
       filterable: false,
     }.freeze,
@@ -82,6 +86,7 @@ class Notification < ApplicationRecord
     reblog: [status: :reblog],
     mention: [mention: :status],
     favourite: [favourite: :status],
+    reaction: [status_reaction: :status],
     poll: [poll: :status],
     update: :status,
     'admin.report': [report: :target_account],
@@ -97,6 +102,7 @@ class Notification < ApplicationRecord
     belongs_to :follow, inverse_of: :notification
     belongs_to :follow_request, inverse_of: :notification
     belongs_to :favourite, inverse_of: :notification
+    belongs_to :status_reaction, inverse_of: :notification
     belongs_to :poll, inverse_of: false
     belongs_to :report, inverse_of: false
     belongs_to :account_relationship_severance_event, inverse_of: false
@@ -120,6 +126,8 @@ def target_status
       status&.reblog
     when :favourite
       favourite&.status
+    when :reaction
+      status_reaction&.status
     when :mention
       mention&.status
     when :poll
@@ -181,6 +189,8 @@ def preload_cache_collection_target_statuses(notifications, &_block)
     end
   end
 
+  alias reaction status_reaction
+
   after_initialize :set_from_account
   before_validation :set_from_account
 
@@ -192,7 +202,7 @@ def set_from_account
     return unless new_record?
 
     case activity_type
-    when 'Status', 'Follow', 'Favourite', 'FollowRequest', 'Poll', 'Report'
+    when 'Status', 'Follow', 'Favourite', 'StatusReaction', 'FollowRequest', 'Poll', 'Report'
       self.from_account_id = activity&.account_id
     when 'Mention'
       self.from_account_id = activity&.status&.account_id
diff --git a/app/models/status.rb b/app/models/status.rb
index 402eaba2910f4e..b59cb76cccf920 100644
--- a/app/models/status.rb
+++ b/app/models/status.rb
@@ -86,6 +86,7 @@ class Status < ApplicationRecord
   has_many :mentions, dependent: :destroy, inverse_of: :status
   has_many :mentioned_accounts, through: :mentions, source: :account, class_name: 'Account'
   has_many :media_attachments, dependent: :nullify
+  has_many :status_reactions, inverse_of: :status, dependent: :destroy
 
   # The `dependent` option is enabled by the initial `mentions` association declaration
   has_many :active_mentions, -> { active }, class_name: 'Mention', inverse_of: :status # rubocop:disable Rails/HasManyOrHasOneDependent
@@ -286,6 +287,21 @@ def emojis
     @emojis = CustomEmoji.from_text(fields.join(' '), account.domain)
   end
 
+  def reactions(account = nil)
+    records = begin
+      scope = status_reactions.group(:status_id, :name, :custom_emoji_id).order(Arel.sql('MIN(created_at) ASC'))
+
+      if account.nil?
+        scope.select('name, custom_emoji_id, count(*) as count, false as me')
+      else
+        scope.select("name, custom_emoji_id, count(*) as count, exists(select 1 from status_reactions r where r.account_id = #{account.id} and r.status_id = status_reactions.status_id and r.name = status_reactions.name and (r.custom_emoji_id = status_reactions.custom_emoji_id or r.custom_emoji_id is null and status_reactions.custom_emoji_id is null)) as me")
+      end
+    end
+
+    ActiveRecord::Associations::Preloader.new(records: records, associations: :custom_emoji)
+    records
+  end
+
   def ordered_media_attachments
     if ordered_media_attachment_ids.nil?
       # NOTE: sort Ruby-side to avoid hitting the database when the status is
diff --git a/app/models/status_reaction.rb b/app/models/status_reaction.rb
new file mode 100644
index 00000000000000..bc6eda2a1cc0f8
--- /dev/null
+++ b/app/models/status_reaction.rb
@@ -0,0 +1,33 @@
+# frozen_string_literal: true
+
+# == Schema Information
+#
+# Table name: status_reactions
+#
+#  id              :bigint(8)        not null, primary key
+#  account_id      :bigint(8)        not null
+#  status_id       :bigint(8)        not null
+#  name            :string           default(""), not null
+#  custom_emoji_id :bigint(8)
+#  created_at      :datetime         not null
+#  updated_at      :datetime         not null
+#
+class StatusReaction < ApplicationRecord
+  belongs_to :account
+  belongs_to :status, inverse_of: :status_reactions
+  belongs_to :custom_emoji, optional: true
+
+  has_one :notification, as: :activity, dependent: :destroy
+
+  validates :name, presence: true
+  validates_with StatusReactionValidator
+
+  before_validation :set_custom_emoji
+
+  private
+
+  # Sets custom_emoji to nil when disabled
+  def set_custom_emoji
+    self.custom_emoji = CustomEmoji.find_by(disabled: false, shortcode: name, domain: custom_emoji.domain) if name.present? && custom_emoji.present?
+  end
+end
diff --git a/app/models/user_settings.rb b/app/models/user_settings.rb
index 4ee017a43788d1..1ae6babf26aa48 100644
--- a/app/models/user_settings.rb
+++ b/app/models/user_settings.rb
@@ -18,6 +18,7 @@ class KeyError < Error; end
   setting :default_privacy, default: nil, in: %w(public unlisted private)
   setting :default_content_type, default: 'text/plain'
   setting :hide_followers_count, default: false
+  setting :visible_reactions, default: 6
   setting :default_quote_policy, default: 'public', in: %w(public followers nobody)
 
   setting_inverse_alias :indexable, :noindex
diff --git a/app/policies/status_policy.rb b/app/policies/status_policy.rb
index fb60ca20ce3511..2bbabfeb2faf37 100644
--- a/app/policies/status_policy.rb
+++ b/app/policies/status_policy.rb
@@ -28,6 +28,10 @@ def favourite?
     show? && !blocking_author?
   end
 
+  def react?
+    show? && !blocking_author?
+  end
+
   def destroy?
     owned?
   end
diff --git a/app/serializers/activitypub/emoji_reaction_serializer.rb b/app/serializers/activitypub/emoji_reaction_serializer.rb
new file mode 100644
index 00000000000000..f8887f15b7121e
--- /dev/null
+++ b/app/serializers/activitypub/emoji_reaction_serializer.rb
@@ -0,0 +1,39 @@
+# frozen_string_literal: true
+
+class ActivityPub::EmojiReactionSerializer < ActivityPub::Serializer
+  attributes :id, :type, :actor, :content
+  attribute :virtual_object, key: :object
+  attribute :custom_emoji, key: :tag, unless: -> { object.custom_emoji.nil? }
+
+  def id
+    [ActivityPub::TagManager.instance.uri_for(object.account), '#emoji_reactions/', object.id].join
+  end
+
+  def type
+    'EmojiReact'
+  end
+
+  def actor
+    ActivityPub::TagManager.instance.uri_for(object.account)
+  end
+
+  def virtual_object
+    ActivityPub::TagManager.instance.uri_for(object.status)
+  end
+
+  def content
+    if object.custom_emoji.nil?
+      object.name
+    else
+      ":#{object.name}:"
+    end
+  end
+
+  alias reaction content
+
+  # Akkoma (and possibly others) expect `tag` to be an array, so we can't just
+  # use the has_one shorthand because we need to wrap it into an array manually
+  def custom_emoji
+    [ActivityPub::EmojiSerializer.new(object.custom_emoji).serializable_hash]
+  end
+end
diff --git a/app/serializers/activitypub/undo_emoji_reaction_serializer.rb b/app/serializers/activitypub/undo_emoji_reaction_serializer.rb
new file mode 100644
index 00000000000000..49f0c1c8fd2603
--- /dev/null
+++ b/app/serializers/activitypub/undo_emoji_reaction_serializer.rb
@@ -0,0 +1,19 @@
+# frozen_string_literal: true
+
+class ActivityPub::UndoEmojiReactionSerializer < ActivityPub::Serializer
+  attributes :id, :type, :actor
+
+  has_one :object, serializer: ActivityPub::EmojiReactionSerializer
+
+  def id
+    [ActivityPub::TagManager.instance.uri_for(object.account), '#emoji_reactions/', object.id, '/undo'].join
+  end
+
+  def type
+    'Undo'
+  end
+
+  def actor
+    ActivityPub::TagManager.instance.uri_for(object.account)
+  end
+end
diff --git a/app/serializers/initial_state_serializer.rb b/app/serializers/initial_state_serializer.rb
index 7cedec5978586a..9cd2dd9d8f216d 100644
--- a/app/serializers/initial_state_serializer.rb
+++ b/app/serializers/initial_state_serializer.rb
@@ -6,13 +6,17 @@ class InitialStateSerializer < ActiveModel::Serializer
   attributes :meta, :compose, :accounts,
              :media_attachments, :settings,
              :max_feed_hashtags, :poll_limits,
-             :languages
+             :languages, :max_reactions
 
   attribute :critical_updates_pending, if: -> { object&.role&.can?(:view_devops) && SoftwareUpdate.check_enabled? }
 
   has_one :push_subscription, serializer: REST::WebPushSubscriptionSerializer
   has_one :role, serializer: REST::RoleSerializer
 
+  def max_reactions
+    StatusReactionValidator::LIMIT
+  end
+
   def max_feed_hashtags
     TagFeed::LIMIT_PER_MODE
   end
@@ -29,8 +33,8 @@ def poll_limits
   def meta # rubocop:disable Metrics/AbcSize
     store = default_meta_store
 
-    if object.current_account
-      store[:me]                = object.current_account.id.to_s
+    if object_account
+      store[:me]                = object_account.id.to_s
       store[:boost_modal]       = object_account_user.setting_boost_modal
       store[:favourite_modal]   = object_account_user.setting_favourite_modal
       store[:delete_modal]      = object_account_user.setting_delete_modal
@@ -47,6 +51,7 @@ def meta # rubocop:disable Metrics/AbcSize
       store[:default_content_type] = object_account_user.setting_default_content_type
       store[:system_emoji_font] = object_account_user.setting_system_emoji_font
       store[:show_trends]       = Setting.trends && object_account_user.setting_trends
+      store[:visible_reactions] = object_account_user.setting_visible_reactions
     else
       store[:auto_play_gif] = Setting.auto_play_gif
       store[:display_media] = Setting.display_media
@@ -131,6 +136,10 @@ def default_meta_store
     }
   end
 
+  def object_account
+    object.current_account
+  end
+
   def object_account_user
     object.current_account.user
   end
diff --git a/app/serializers/rest/instance_serializer.rb b/app/serializers/rest/instance_serializer.rb
index 01bfb0d688ac24..c66dfd9ba6d981 100644
--- a/app/serializers/rest/instance_serializer.rb
+++ b/app/serializers/rest/instance_serializer.rb
@@ -101,6 +101,10 @@ def configuration
         enabled: TranslationService.configured?,
       },
 
+      reactions: {
+        max_reactions: StatusReactionValidator::LIMIT,
+      },
+
       limited_federation: limited_federation?,
     }
   end
diff --git a/app/serializers/rest/notification_serializer.rb b/app/serializers/rest/notification_serializer.rb
index 320bc86961d922..2137a5234c8d13 100644
--- a/app/serializers/rest/notification_serializer.rb
+++ b/app/serializers/rest/notification_serializer.rb
@@ -21,7 +21,7 @@ def group_key
   end
 
   def status_type?
-    [:favourite, :reblog, :status, :mention, :poll, :update].include?(object.type)
+    [:favourite, :reaction, :reblog, :status, :mention, :poll, :update].include?(object.type)
   end
 
   def report_type?
diff --git a/app/serializers/rest/reaction_serializer.rb b/app/serializers/rest/reaction_serializer.rb
index 1a5dca0183d154..b0f0732bf766e3 100644
--- a/app/serializers/rest/reaction_serializer.rb
+++ b/app/serializers/rest/reaction_serializer.rb
@@ -21,6 +21,14 @@ def custom_emoji?
     object.custom_emoji.present?
   end
 
+  def name
+    if extern?
+      [object.name, '@', object.custom_emoji.domain].join
+    else
+      object.name
+    end
+  end
+
   def url
     full_asset_url(object.custom_emoji.image.url)
   end
@@ -28,4 +36,10 @@ def url
   def static_url
     full_asset_url(object.custom_emoji.image.url(:static))
   end
+
+  private
+
+  def extern?
+    custom_emoji? && object.custom_emoji.domain.present?
+  end
 end
diff --git a/app/serializers/rest/status_serializer.rb b/app/serializers/rest/status_serializer.rb
index 8d3249170342b8..1e1c9d24e57516 100644
--- a/app/serializers/rest/status_serializer.rb
+++ b/app/serializers/rest/status_serializer.rb
@@ -30,6 +30,7 @@ class REST::StatusSerializer < ActiveModel::Serializer
   has_many :ordered_mentions, key: :mentions
   has_many :tags
   has_many :emojis, serializer: REST::CustomEmojiSerializer
+  has_many :reactions, serializer: REST::ReactionSerializer
 
   has_one :quote, key: :quote, serializer: REST::QuoteSerializer
   has_one :preview_card, key: :card, serializer: REST::PreviewCardSerializer
@@ -163,6 +164,10 @@ def ordered_mentions
     object.active_mentions.to_a.sort_by(&:id)
   end
 
+  def reactions
+    object.reactions(current_user&.account)
+  end
+
   private
 
   def relationships
diff --git a/app/serializers/rest/v1/instance_serializer.rb b/app/serializers/rest/v1/instance_serializer.rb
index 420f1926cfa275..740155a7994416 100644
--- a/app/serializers/rest/v1/instance_serializer.rb
+++ b/app/serializers/rest/v1/instance_serializer.rb
@@ -89,6 +89,10 @@ def configuration
         min_expiration: PollExpirationValidator::MIN_EXPIRATION,
         max_expiration: PollExpirationValidator::MAX_EXPIRATION,
       },
+
+      reactions: {
+        max_reactions: StatusReactionValidator::LIMIT,
+      },
     }
   end
 
diff --git a/app/services/react_service.rb b/app/services/react_service.rb
new file mode 100644
index 00000000000000..de2fd1de9c6dcb
--- /dev/null
+++ b/app/services/react_service.rb
@@ -0,0 +1,31 @@
+# frozen_string_literal: true
+
+class ReactService < BaseService
+  include Authorization
+  include Payloadable
+
+  def call(account, status, emoji)
+    authorize_with account, status, :react?
+
+    name, domain = emoji.split('@')
+    return unless domain.nil? || status.local?
+
+    custom_emoji = CustomEmoji.find_by(shortcode: name, domain: domain)
+    reaction = StatusReaction.find_by(account: account, status: status, name: name, custom_emoji: custom_emoji)
+    return reaction unless reaction.nil?
+
+    reaction = StatusReaction.create!(account: account, status: status, name: name, custom_emoji: custom_emoji)
+
+    json = Oj.dump(serialize_payload(reaction, ActivityPub::EmojiReactionSerializer))
+    if status.account.local?
+      NotifyService.new.call(status.account, :reaction, reaction)
+      ActivityPub::RawDistributionWorker.perform_async(json, status.account.id)
+    else
+      ActivityPub::DeliveryWorker.perform_async(json, reaction.account_id, status.account.inbox_url)
+    end
+
+    ActivityTracker.increment('activity:interactions')
+
+    reaction
+  end
+end
diff --git a/app/services/unreact_service.rb b/app/services/unreact_service.rb
new file mode 100644
index 00000000000000..7c1b32e94f1adc
--- /dev/null
+++ b/app/services/unreact_service.rb
@@ -0,0 +1,23 @@
+# frozen_string_literal: true
+
+class UnreactService < BaseService
+  include Payloadable
+
+  def call(account, status, emoji)
+    name, domain = emoji.split('@')
+    custom_emoji = CustomEmoji.find_by(shortcode: name, domain: domain)
+    reaction = StatusReaction.find_by(account: account, status: status, name: name, custom_emoji: custom_emoji)
+    return if reaction.nil?
+
+    reaction.destroy!
+
+    json = Oj.dump(serialize_payload(reaction, ActivityPub::UndoEmojiReactionSerializer))
+    if status.account.local?
+      ActivityPub::RawDistributionWorker.perform_async(json, status.account.id)
+    else
+      ActivityPub::DeliveryWorker.perform_async(json, reaction.account_id, status.account.inbox_url)
+    end
+
+    reaction
+  end
+end
diff --git a/app/validators/status_reaction_validator.rb b/app/validators/status_reaction_validator.rb
new file mode 100644
index 00000000000000..046476de9d69e2
--- /dev/null
+++ b/app/validators/status_reaction_validator.rb
@@ -0,0 +1,28 @@
+# frozen_string_literal: true
+
+class StatusReactionValidator < ActiveModel::Validator
+  SUPPORTED_EMOJIS = Oj.load_file(Rails.root.join('app', 'javascript', 'mastodon', 'features', 'emoji', 'emoji_map.json').to_s).keys.freeze
+
+  LIMIT = [1, (ENV['MAX_REACTIONS'] || 1).to_i].max
+
+  def validate(reaction)
+    return if reaction.name.blank?
+
+    reaction.errors.add(:name, I18n.t('reactions.errors.unrecognized_emoji')) if reaction.custom_emoji_id.blank? && !unicode_emoji?(reaction.name)
+    reaction.errors.add(:base, I18n.t('reactions.errors.limit_reached')) if reaction.account.local? && new_reaction?(reaction) && limit_reached?(reaction)
+  end
+
+  private
+
+  def unicode_emoji?(name)
+    SUPPORTED_EMOJIS.include?(name)
+  end
+
+  def new_reaction?(reaction)
+    !reaction.status.status_reactions.exists?(status: reaction.status, account: reaction.account, name: reaction.name, custom_emoji: reaction.custom_emoji)
+  end
+
+  def limit_reached?(reaction)
+    reaction.status.status_reactions.where(status: reaction.status, account: reaction.account).count >= LIMIT
+  end
+end
diff --git a/app/views/settings/preferences/appearance/show.html.haml b/app/views/settings/preferences/appearance/show.html.haml
index 5484fe33beacbf..9713da87f940e4 100644
--- a/app/views/settings/preferences/appearance/show.html.haml
+++ b/app/views/settings/preferences/appearance/show.html.haml
@@ -54,6 +54,9 @@
       = ff.input :'web.use_system_emoji_font', wrapper: :with_label, label: I18n.t('simple_form.labels.defaults.setting_system_emoji_font'), glitch_only: true
       = ff.input :'web.use_system_scrollbars', wrapper: :with_label, hint: I18n.t('simple_form.hints.defaults.setting_system_scrollbars_ui'), label: I18n.t('simple_form.labels.defaults.setting_system_scrollbars_ui')
 
+    .fields-group.fields-row__column.fields-row__column-6
+      = ff.input :'visible_reactions', wrapper: :with_label, label: I18n.t('simple_form.labels.defaults.setting_visible_reactions'), input_html: { type: 'number', min: '0', data: { default: '6' } }, hint: false
+
     %h4= t 'appearance.discovery'
 
     .fields-group
diff --git a/app/workers/unreact_worker.rb b/app/workers/unreact_worker.rb
new file mode 100644
index 00000000000000..15f1f4dd7752c9
--- /dev/null
+++ b/app/workers/unreact_worker.rb
@@ -0,0 +1,11 @@
+# frozen_string_literal: true
+
+class UnreactWorker
+  include Sidekiq::Worker
+
+  def perform(account_id, status_id, emoji)
+    UnreactService.new.call(Account.find(account_id), Status.find(status_id), emoji)
+  rescue ActiveRecord::RecordNotFound
+    true
+  end
+end
diff --git a/config/locales-glitch/en.yml b/config/locales-glitch/en.yml
index 1485ee174d7eeb..43b8ca6c7213b7 100644
--- a/config/locales-glitch/en.yml
+++ b/config/locales-glitch/en.yml
@@ -38,5 +38,10 @@ en:
       title: User verification
   generic:
     use_this: Use this
+  notification_mailer:
+    reaction:
+      body: "%{name} reacted to your post:"
+      subject: "%{name} reacted to your post"
+      title: New reaction
   settings:
     flavours: Flavours
diff --git a/config/locales-glitch/simple_form.en.yml b/config/locales-glitch/simple_form.en.yml
index 9e943133bd9893..9de3f945ce9f60 100644
--- a/config/locales-glitch/simple_form.en.yml
+++ b/config/locales-glitch/simple_form.en.yml
@@ -20,6 +20,7 @@ en:
         setting_show_followers_count: Show your followers count
         setting_skin: Skin
         setting_system_emoji_font: Use system's default font for emojis (applies to Glitch flavour only)
+        setting_visible_reactions: Number of visible emoji reactions
       notification_emails:
         trending_link: New trending link requires review
         trending_status: New trending post requires review
diff --git a/config/routes/api.rb b/config/routes/api.rb
index 31fe75f1074da8..d3027da5a6ca70 100644
--- a/config/routes/api.rb
+++ b/config/routes/api.rb
@@ -16,6 +16,11 @@
         resource :favourite, only: :create
         post :unfavourite, to: 'favourites#destroy'
 
+        # foreign custom emojis are encoded as shortcode@domain.tld
+        # the constraint prevents rails from interpreting the ".tld" as a filename extension
+        post '/react/:id', to: 'reactions#create', constraints: { id: %r{[^/]+} }
+        post '/unreact/:id', to: 'reactions#destroy', constraints: { id: %r{[^/]+} }
+
         resource :bookmark, only: :create
         post :unbookmark, to: 'bookmarks#destroy'
 
diff --git a/config/settings.yml b/config/settings.yml
index 2b38b38edd5a6e..705ac89f996fad 100644
--- a/config/settings.yml
+++ b/config/settings.yml
@@ -22,6 +22,7 @@ defaults: &defaults
   trends_as_landing_page: true
   trendable_by_default: false
   trending_status_cw: true
+  visible_reactions: 6
   hide_followers_count: false
   reserved_usernames:
     - abuse
diff --git a/db/migrate/20221124114030_create_status_reactions.rb b/db/migrate/20221124114030_create_status_reactions.rb
new file mode 100644
index 00000000000000..7e6e87e7bbf914
--- /dev/null
+++ b/db/migrate/20221124114030_create_status_reactions.rb
@@ -0,0 +1,16 @@
+# frozen_string_literal: true
+
+class CreateStatusReactions < ActiveRecord::Migration[6.1]
+  def change
+    create_table :status_reactions do |t|
+      t.references :account, null: false, foreign_key: { on_delete: :cascade }
+      t.references :status, null: false, foreign_key: { on_delete: :cascade }
+      t.string :name, null: false, default: ''
+      t.references :custom_emoji, null: true, foreign_key: { on_delete: :cascade }
+
+      t.timestamps
+    end
+
+    add_index :status_reactions, [:account_id, :status_id, :name], unique: true, name: :index_status_reactions_on_account_id_and_status_id
+  end
+end
diff --git a/db/migrate/20230215074425_move_emoji_reaction_settings.rb b/db/migrate/20230215074425_move_emoji_reaction_settings.rb
new file mode 100644
index 00000000000000..420772b6923f1a
--- /dev/null
+++ b/db/migrate/20230215074425_move_emoji_reaction_settings.rb
@@ -0,0 +1,49 @@
+# frozen_string_literal: true
+
+class MoveEmojiReactionSettings < ActiveRecord::Migration[6.1]
+  class User < ApplicationRecord; end
+
+  MAPPING = {
+    setting_visible_reactions: 'visible_reactions',
+  }.freeze
+
+  class LegacySetting < ApplicationRecord
+    self.table_name = 'settings'
+
+    def var
+      self[:var]&.to_sym
+    end
+
+    def value
+      YAML.safe_load(self[:value], permitted_classes: [ActiveSupport::HashWithIndifferentAccess]) if self[:value].present?
+    end
+  end
+
+  def up
+    User.find_in_batches do |users|
+      previous_settings_for_batch = LegacySetting.where(thing_type: 'User', thing_id: users.map(&:id)).group_by(&:thing_id)
+
+      users.each do |user|
+        previous_settings = previous_settings_for_batch[user.id]&.index_by(&:var) || {}
+        user_settings = Oj.load(user.settings || '{}')
+        user_settings.delete('theme')
+
+        MAPPING.each do |legacy_key, new_key|
+          value = previous_settings[legacy_key]&.value
+
+          next if value.blank?
+
+          if value.is_a?(Hash)
+            value.each do |nested_key, nested_value|
+              user_settings[MAPPING[legacy_key][nested_key.to_sym]] = nested_value
+            end
+          else
+            user_settings[new_key] = value
+          end
+        end
+
+        user.update_column('settings', Oj.dump(user_settings)) # rubocop:disable Rails/SkipsModelValidations
+      end
+    end
+  end
+end
diff --git a/db/schema.rb b/db/schema.rb
index 785dcf3c50c944..0ee397974d73ee 100644
--- a/db/schema.rb
+++ b/db/schema.rb
@@ -1076,6 +1076,18 @@
     t.index ["status_id"], name: "index_status_pins_on_status_id"
   end
 
+  create_table "status_reactions", force: :cascade do |t|
+    t.bigint "account_id", null: false
+    t.bigint "status_id", null: false
+    t.string "name", default: "", null: false
+    t.bigint "custom_emoji_id"
+    t.datetime "created_at", precision: 6, null: false
+    t.datetime "updated_at", precision: 6, null: false
+    t.index ["account_id", "status_id", "name"], name: "index_status_reactions_on_account_id_and_status_id", unique: true
+    t.index ["custom_emoji_id"], name: "index_status_reactions_on_custom_emoji_id"
+    t.index ["status_id"], name: "index_status_reactions_on_status_id"
+  end
+
   create_table "status_stats", force: :cascade do |t|
     t.bigint "status_id", null: false
     t.bigint "replies_count", default: 0, null: false
@@ -1431,6 +1443,9 @@
   add_foreign_key "status_edits", "statuses", on_delete: :cascade
   add_foreign_key "status_pins", "accounts", name: "fk_d4cb435b62", on_delete: :cascade
   add_foreign_key "status_pins", "statuses", on_delete: :cascade
+  add_foreign_key "status_reactions", "accounts", on_delete: :cascade
+  add_foreign_key "status_reactions", "custom_emojis", on_delete: :cascade
+  add_foreign_key "status_reactions", "statuses", on_delete: :cascade
   add_foreign_key "status_stats", "statuses", on_delete: :cascade
   add_foreign_key "status_trends", "accounts", on_delete: :cascade
   add_foreign_key "status_trends", "statuses", on_delete: :cascade
diff --git a/spec/fabricators/status_reaction_fabricator.rb b/spec/fabricators/status_reaction_fabricator.rb
new file mode 100644
index 00000000000000..6c5e67e8a41357
--- /dev/null
+++ b/spec/fabricators/status_reaction_fabricator.rb
@@ -0,0 +1,8 @@
+# frozen_string_literal: true
+
+Fabricator(:status_reaction) do
+  account
+  status
+  name '👍'
+  custom_emoji
+end
diff --git a/spec/models/status_reaction_spec.rb b/spec/models/status_reaction_spec.rb
new file mode 100644
index 00000000000000..ccfa9ee8d88825
--- /dev/null
+++ b/spec/models/status_reaction_spec.rb
@@ -0,0 +1,3 @@
+# frozen_string_literal: true
+
+require 'rails_helper'

From 33ce1e58e1311b40a9677a7099d29c1851ac6254 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Fri, 10 Nov 2023 15:16:29 -0600
Subject: [PATCH 02/40] Add notification emails for reactions

---
 app/javascript/images/mailer/icon_add.png     | Bin 0 -> 1417 bytes
 app/mailers/notification_mailer.rb            |  12 ++++-
 app/models/user_settings.rb                   |   1 +
 .../notification_mailer/reaction.html.haml    |  45 ++++++++++++++++++
 .../notification_mailer/reaction.text.erb     |   5 ++
 .../preferences/notifications/show.html.haml  |   1 +
 config/locales-glitch/simple_form.en.yml      |   1 +
 7 files changed, 63 insertions(+), 2 deletions(-)
 create mode 100644 app/javascript/images/mailer/icon_add.png
 create mode 100644 app/views/notification_mailer/reaction.html.haml
 create mode 100644 app/views/notification_mailer/reaction.text.erb

diff --git a/app/javascript/images/mailer/icon_add.png b/app/javascript/images/mailer/icon_add.png
new file mode 100644
index 0000000000000000000000000000000000000000..93263cffd8af13df492a1b093910a8e0badaa553
GIT binary patch
literal 1417
zcmeAS@N?(olHy`uVBq!ia0vp^2SAvE4M+yv$zcaloCO|{#S9E(G9b*j{7}U!prB-l
zYeY$Kep*R+Vo@qXd3m{BW?pu2a$-TMUVc&f>~}U&3=FJdo-U3d6^w8124=-Z^RQgB
zsQ4FLc7liJP|nG%_sY*r+ZA>6?@49(`1ttxKkW`v58Tfx*eUqKzk%VMf^P%E%U`YP
z4bmRM3J$yK9&$clyTrmVVO@L$(~d?HMy4gN#pf~P4Kigv{5k689QY!i^zX+<-owm)
zm|9MY-`y|#hV2o{AEqPx3*_cAeC6(VuI})M;nhdZfc*^>bt6dl|7V7V^~~1)o^)OR
zT>nR9&db|%jLTSR>t``A`dv@|smaLX!};qUFmC6pJO3$|iDib+m%o`zEEcizpDt(N
zFi?H*`!Wkh!7jVg{+t2{UKhSE=M;EQQaf$Fkivl}3*P$+D;#+FOUGW-p+VE}{(Lou
zhRa_g>%1Bmf}8f)`#w1IpMS%z_mk@v|9yG?`TlwTr91BZ72MD8{>JP*4GfH8QxaOs
zSvWrQ?LEoOA&}t68CK!mFe*t_Ak^sHc({H2hmW_J<IX)7e^69iCJ&4niG}QXK<eqY
zH+I0NF?8aO0aB;m-mLX$U`TF}+X1Ae-`@Ot1_R?U4%>p642*i))4v-sGW7^nJuqTq
zipe|wE}4l%Lix*qR3?@kcjnza4onhmFB(q+lf+Kj-TlBM(Q|=$IxtBLb_);K^G)Sw
VbJ)bI3M@t$JYD@<);T3K0RVF@NC5x<

literal 0
HcmV?d00001

diff --git a/app/mailers/notification_mailer.rb b/app/mailers/notification_mailer.rb
index a20992dcb56f19..1a3ffceccd056e 100644
--- a/app/mailers/notification_mailer.rb
+++ b/app/mailers/notification_mailer.rb
@@ -6,11 +6,11 @@ class NotificationMailer < ApplicationMailer
          :routing
 
   before_action :process_params
-  with_options only: %i(mention favourite reblog) do
+  with_options only: %i(mention favourite reaction reblog) do
     before_action :set_status
     after_action :thread_by_conversation!
   end
-  before_action :set_account, only: [:follow, :favourite, :reblog, :follow_request]
+  before_action :set_account, only: [:follow, :favourite, :reaction, :reblog, :follow_request]
   after_action :set_list_headers!
 
   before_deliver :verify_functional_user
@@ -41,6 +41,14 @@ def favourite
     end
   end
 
+  def reaction
+    return unless @user.functional? && @status.present?
+
+    locale_for_account(@me) do
+      mail subject: default_i18n_subject(name: @account.acct)
+    end
+  end
+
   def reblog
     return if @status.blank?
 
diff --git a/app/models/user_settings.rb b/app/models/user_settings.rb
index 1ae6babf26aa48..30e4f2070bd556 100644
--- a/app/models/user_settings.rb
+++ b/app/models/user_settings.rb
@@ -48,6 +48,7 @@ class KeyError < Error; end
     setting :follow, default: true
     setting :reblog, default: false
     setting :favourite, default: false
+    setting :reaction, default: false
     setting :mention, default: true
     setting :follow_request, default: true
     setting :report, default: true
diff --git a/app/views/notification_mailer/reaction.html.haml b/app/views/notification_mailer/reaction.html.haml
new file mode 100644
index 00000000000000..83ae41927d3f99
--- /dev/null
+++ b/app/views/notification_mailer/reaction.html.haml
@@ -0,0 +1,45 @@
+%table.email-table{ cellspacing: 0, cellpadding: 0 }
+  %tbody
+    %tr
+      %td.email-body
+        .email-container
+          %table.content-section{ cellspacing: 0, cellpadding: 0 }
+            %tbody
+              %tr
+                %td.content-cell.hero
+                  .email-row
+                    .col-6
+                      %table.column{ cellspacing: 0, cellpadding: 0 }
+                        %tbody
+                          %tr
+                            %td.column-cell.text-center.padded
+                              %table.hero-icon{ align: 'center', cellspacing: 0, cellpadding: 0 }
+                                %tbody
+                                  %tr
+                                    %td
+                                      = image_tag full_pack_url('media/images/mailer/icon_add.png'), alt: ''
+
+                              %h1= t 'notification_mailer.reaction.title'
+                              %p.lead= t('notification_mailer.reaction.body', name: @account.pretty_acct)
+
+= render 'status', status: @status, time_zone: @me.user_time_zone
+
+%table.email-table{ cellspacing: 0, cellpadding: 0 }
+  %tbody
+    %tr
+      %td.email-body
+        .email-container
+          %table.content-section{ cellspacing: 0, cellpadding: 0 }
+            %tbody
+              %tr
+                %td.content-cell.content-start.border-top
+                  %table.column{ cellspacing: 0, cellpadding: 0 }
+                    %tbody
+                      %tr
+                        %td.column-cell.button-cell
+                          %table.button{ align: 'center', cellspacing: 0, cellpadding: 0 }
+                            %tbody
+                              %tr
+                                %td.button-primary
+                                  = link_to web_url("@#{@status.account.pretty_acct}/#{@status.id}") do
+                                    %span= t 'application_mailer.view_status'
diff --git a/app/views/notification_mailer/reaction.text.erb b/app/views/notification_mailer/reaction.text.erb
new file mode 100644
index 00000000000000..fa30d708eaa33c
--- /dev/null
+++ b/app/views/notification_mailer/reaction.text.erb
@@ -0,0 +1,5 @@
+<%= raw t('application_mailer.salutation', name: display_name(@me)) %>
+
+<%= raw t('notification_mailer.reaction.body', name: @account.pretty_acct) %>
+
+<%= render 'status', status: @status %>
diff --git a/app/views/settings/preferences/notifications/show.html.haml b/app/views/settings/preferences/notifications/show.html.haml
index 9fc293f0a293f9..6d91dfbb005ccc 100644
--- a/app/views/settings/preferences/notifications/show.html.haml
+++ b/app/views/settings/preferences/notifications/show.html.haml
@@ -17,6 +17,7 @@
       = ff.input :'notification_emails.follow_request', wrapper: :with_label, label: I18n.t('simple_form.labels.notification_emails.follow_request')
       = ff.input :'notification_emails.reblog', wrapper: :with_label, label: I18n.t('simple_form.labels.notification_emails.reblog')
       = ff.input :'notification_emails.favourite', wrapper: :with_label, label: I18n.t('simple_form.labels.notification_emails.favourite')
+      = ff.input :'notification_emails.reaction', wrapper: :with_label, label: I18n.t('simple_form.labels.notification_emails.reaction')
       = ff.input :'notification_emails.mention', wrapper: :with_label, label: I18n.t('simple_form.labels.notification_emails.mention')
 
     .fields-group
diff --git a/config/locales-glitch/simple_form.en.yml b/config/locales-glitch/simple_form.en.yml
index 9de3f945ce9f60..a9361bf192a397 100644
--- a/config/locales-glitch/simple_form.en.yml
+++ b/config/locales-glitch/simple_form.en.yml
@@ -22,6 +22,7 @@ en:
         setting_system_emoji_font: Use system's default font for emojis (applies to Glitch flavour only)
         setting_visible_reactions: Number of visible emoji reactions
       notification_emails:
+        reaction: Someone reacted to your post
         trending_link: New trending link requires review
         trending_status: New trending post requires review
         trending_tag: New trending tag requires review

From 83789e3aab0178cd114df7a7c02397a1c4c6bd3e Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Fri, 10 Nov 2023 17:36:40 -0600
Subject: [PATCH 03/40] Fix reblog reactions

---
 app/models/status_reaction.rb | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/app/models/status_reaction.rb b/app/models/status_reaction.rb
index bc6eda2a1cc0f8..2fdb3da0ac62eb 100644
--- a/app/models/status_reaction.rb
+++ b/app/models/status_reaction.rb
@@ -22,6 +22,10 @@ class StatusReaction < ApplicationRecord
   validates :name, presence: true
   validates_with StatusReactionValidator
 
+  before_validation do
+    self.status = status.reblog if status&.reblog?
+  end
+
   before_validation :set_custom_emoji
 
   private

From 72c84f1052fc2e2e1114414411621da79c1d6a53 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 12 Nov 2023 20:59:36 -0600
Subject: [PATCH 04/40] Refactor react services

---
 app/services/react_service.rb   | 27 +++++++++++++++++++++------
 app/services/unreact_service.rb | 18 +++++++++++-------
 2 files changed, 32 insertions(+), 13 deletions(-)

diff --git a/app/services/react_service.rb b/app/services/react_service.rb
index de2fd1de9c6dcb..cfc3f99a78041f 100644
--- a/app/services/react_service.rb
+++ b/app/services/react_service.rb
@@ -16,16 +16,31 @@ def call(account, status, emoji)
 
     reaction = StatusReaction.create!(account: account, status: status, name: name, custom_emoji: custom_emoji)
 
-    json = Oj.dump(serialize_payload(reaction, ActivityPub::EmojiReactionSerializer))
+    Trends.statuses.register(status)
+
+    create_notification(reaction)
+    increment_statistics
+
+    reaction
+  end
+
+  private
+
+  def create_notification(reaction)
+    status = reaction.status
+
     if status.account.local?
-      NotifyService.new.call(status.account, :reaction, reaction)
-      ActivityPub::RawDistributionWorker.perform_async(json, status.account.id)
-    else
-      ActivityPub::DeliveryWorker.perform_async(json, reaction.account_id, status.account.inbox_url)
+      LocalNotificationWorker.perform_async(status.account_id, reaction.id, 'StatusReaction', 'reaction')
+    elsif status.account.activitypub?
+      ActivityPub::DeliveryWorker.perform_async(build_json(reaction), reaction.account_id, status.account.inbox_url)
     end
+  end
 
+  def increment_statistics
     ActivityTracker.increment('activity:interactions')
+  end
 
-    reaction
+  def build_json(reaction)
+    Oj.dump(serialize_payload(reaction, ActivityPub::EmojiReactionSerializer))
   end
 end
diff --git a/app/services/unreact_service.rb b/app/services/unreact_service.rb
index 7c1b32e94f1adc..49d232e931418f 100644
--- a/app/services/unreact_service.rb
+++ b/app/services/unreact_service.rb
@@ -10,14 +10,18 @@ def call(account, status, emoji)
     return if reaction.nil?
 
     reaction.destroy!
+    create_notification(reaction) if !status.account.local? && status.account.activitypub?
+    reaction
+  end
 
-    json = Oj.dump(serialize_payload(reaction, ActivityPub::UndoEmojiReactionSerializer))
-    if status.account.local?
-      ActivityPub::RawDistributionWorker.perform_async(json, status.account.id)
-    else
-      ActivityPub::DeliveryWorker.perform_async(json, reaction.account_id, status.account.inbox_url)
-    end
+  private
 
-    reaction
+  def create_notification(reaction)
+    status = reaction.status
+    ActivityPub::DeliveryWorker.perform_async(build_json(reaction), reaction.account_id, status.account.inbox_url)
+  end
+
+  def build_json(reaction)
+    Oj.dump(serialize_payload(reaction, ActivityPub::UndoEmojiReactionSerializer))
   end
 end

From aa8121ced2d4859cf259d0f0ed0c1f822b56b1d2 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Mon, 18 Dec 2023 18:27:02 -0600
Subject: [PATCH 05/40] Linting fixes

---
 .../flavours/glitch/components/status_reactions.jsx         | 6 +++---
 app/models/status.rb                                        | 2 ++
 app/views/settings/preferences/appearance/show.html.haml    | 2 +-
 3 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/app/javascript/flavours/glitch/components/status_reactions.jsx b/app/javascript/flavours/glitch/components/status_reactions.jsx
index e3ae79958b4084..81443d20555e14 100644
--- a/app/javascript/flavours/glitch/components/status_reactions.jsx
+++ b/app/javascript/flavours/glitch/components/status_reactions.jsx
@@ -96,11 +96,11 @@ class Reaction extends ImmutablePureComponent {
     } else {
       addReaction(statusId, reaction.get('name'));
     }
-  }
+  };
 
-  handleMouseEnter = () => this.setState({ hovered: true })
+  handleMouseEnter = () => this.setState({ hovered: true });
 
-  handleMouseLeave = () => this.setState({ hovered: false })
+  handleMouseLeave = () => this.setState({ hovered: false });
 
   render() {
     const { reaction } = this.props;
diff --git a/app/models/status.rb b/app/models/status.rb
index b59cb76cccf920..61c903ad128c5f 100644
--- a/app/models/status.rb
+++ b/app/models/status.rb
@@ -294,7 +294,9 @@ def reactions(account = nil)
       if account.nil?
         scope.select('name, custom_emoji_id, count(*) as count, false as me')
       else
+        # rubocop:disable Layout/LineLength
         scope.select("name, custom_emoji_id, count(*) as count, exists(select 1 from status_reactions r where r.account_id = #{account.id} and r.status_id = status_reactions.status_id and r.name = status_reactions.name and (r.custom_emoji_id = status_reactions.custom_emoji_id or r.custom_emoji_id is null and status_reactions.custom_emoji_id is null)) as me")
+        # rubocop:enable Layout/LineLength
       end
     end
 
diff --git a/app/views/settings/preferences/appearance/show.html.haml b/app/views/settings/preferences/appearance/show.html.haml
index 9713da87f940e4..19857fe551aaca 100644
--- a/app/views/settings/preferences/appearance/show.html.haml
+++ b/app/views/settings/preferences/appearance/show.html.haml
@@ -55,7 +55,7 @@
       = ff.input :'web.use_system_scrollbars', wrapper: :with_label, hint: I18n.t('simple_form.hints.defaults.setting_system_scrollbars_ui'), label: I18n.t('simple_form.labels.defaults.setting_system_scrollbars_ui')
 
     .fields-group.fields-row__column.fields-row__column-6
-      = ff.input :'visible_reactions', wrapper: :with_label, label: I18n.t('simple_form.labels.defaults.setting_visible_reactions'), input_html: { type: 'number', min: '0', data: { default: '6' } }, hint: false
+      = ff.input :visible_reactions, wrapper: :with_label, label: I18n.t('simple_form.labels.defaults.setting_visible_reactions'), input_html: { type: 'number', min: '0', data: { default: '6' } }, hint: false
 
     %h4= t 'appearance.discovery'
 

From d494dfdcabe56cd94872a033bbf83c301599d0e8 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Tue, 19 Dec 2023 22:15:34 -0600
Subject: [PATCH 06/40] Add reaction notification column settings This was in a
 previous PR. Not quite sure how it didn't carry over.

---
 .../notifications/components/column_settings.jsx    | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/app/javascript/flavours/glitch/features/notifications/components/column_settings.jsx b/app/javascript/flavours/glitch/features/notifications/components/column_settings.jsx
index 81a9d9e1d1f4ed..0377def8219ea4 100644
--- a/app/javascript/flavours/glitch/features/notifications/components/column_settings.jsx
+++ b/app/javascript/flavours/glitch/features/notifications/components/column_settings.jsx
@@ -71,7 +71,7 @@ class ColumnSettings extends PureComponent {
 
         <section role='group' aria-labelledby='notifications-filter-bar'>
           <h3 id='notifications-filter-bar'><FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' /></h3>
- 
+
           <div className='column-settings__row'>
             <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterBarShowStr} />
             <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />
@@ -125,6 +125,17 @@ class ColumnSettings extends PureComponent {
           </div>
         </section>
 
+        <section role='group' aria-labelledby='notifications-reaction'>
+          <h3 id='notifications-reaction'><FormattedMessage id='notifications.column_settings.reaction' defaultMessage='Reactions:' /></h3>
+
+          <div className='column-settings__pillbar'>
+            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reaction']} onChange={onChange} label={alertStr} />
+            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reaction']} onChange={this.onPushChange} label={pushStr} />}
+            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'reaction']} onChange={onChange} label={showStr} />
+            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'reaction']} onChange={onChange} label={soundStr} />
+          </div>
+        </section>
+
         <section role='group' aria-labelledby='notifications-mention'>
           <h3 id='notifications-mention'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></h3>
 

From 57f5f5589595fd2d8f83d201e7e30f998967c619 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Fri, 22 Dec 2023 16:09:43 -0600
Subject: [PATCH 07/40] Fix rubocop complaint

---
 db/migrate/20230215074425_move_emoji_reaction_settings.rb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/db/migrate/20230215074425_move_emoji_reaction_settings.rb b/db/migrate/20230215074425_move_emoji_reaction_settings.rb
index 420772b6923f1a..6d2d5e167ad9ca 100644
--- a/db/migrate/20230215074425_move_emoji_reaction_settings.rb
+++ b/db/migrate/20230215074425_move_emoji_reaction_settings.rb
@@ -42,7 +42,7 @@ def up
           end
         end
 
-        user.update_column('settings', Oj.dump(user_settings)) # rubocop:disable Rails/SkipsModelValidations
+        user.update_column('settings', Oj.dump(user_settings))
       end
     end
   end

From 337a12e2afc14cb7b7aac2614acdccf708ed390b Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Tue, 26 Dec 2023 14:04:53 -0600
Subject: [PATCH 08/40] Check for content attribute in Misskey likes

---
 app/lib/activitypub/activity/like.rb | 7 ++++---
 app/lib/activitypub/activity/undo.rb | 2 +-
 2 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/app/lib/activitypub/activity/like.rb b/app/lib/activitypub/activity/like.rb
index 86d70e0d70822a..f6c8769fee4cae 100644
--- a/app/lib/activitypub/activity/like.rb
+++ b/app/lib/activitypub/activity/like.rb
@@ -15,11 +15,12 @@ def perform
     Trends.statuses.register(original_status)
   end
 
-  # Misskey delivers reactions as likes with the emoji in _misskey_reaction
-  # see https://misskey-hub.net/ns.html#misskey-reaction for details
+  # Misskey delivers reactions as likes with the emoji in _misskey_reaction and content
+  # Versions of Misskey before 12.1.0 only specify emojis in _misskey_reaction, so we check both
+  # See https://misskey-hub.net/ns.html#misskey-reaction for details
   def maybe_process_misskey_reaction
     original_status = status_from_uri(object_uri)
-    name = @json['_misskey_reaction']
+    name = @json['content'] || @json['_misskey_reaction']
     return false if name.nil?
 
     if /^:.*:$/.match?(name)
diff --git a/app/lib/activitypub/activity/undo.rb b/app/lib/activitypub/activity/undo.rb
index 5efcfdc99f2d49..5f9f1bbecbfaf1 100644
--- a/app/lib/activitypub/activity/undo.rb
+++ b/app/lib/activitypub/activity/undo.rb
@@ -110,7 +110,7 @@ def undo_like
     if @account.favourited?(status)
       favourite = status.favourites.where(account: @account).first
       favourite&.destroy
-    elsif @object['_misskey_reaction'].present?
+    elsif @object['content'].present? || @object['_misskey_reaction'].present?
       undo_emoji_react
     else
       delete_later!(object_uri)

From ad94a9599beab8f4ff25fe4848e4736ede9f006f Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sat, 13 Jan 2024 18:16:57 -0600
Subject: [PATCH 09/40] Normalize emojis with variant selectors

---
 app/services/react_service.rb | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/app/services/react_service.rb b/app/services/react_service.rb
index cfc3f99a78041f..be19bd850179ed 100644
--- a/app/services/react_service.rb
+++ b/app/services/react_service.rb
@@ -10,6 +10,9 @@ def call(account, status, emoji)
     name, domain = emoji.split('@')
     return unless domain.nil? || status.local?
 
+    normalized = "#{name}\uFE0F"
+    name = normalized if StatusReactionValidator::SUPPORTED_EMOJIS.include?(normalized)
+
     custom_emoji = CustomEmoji.find_by(shortcode: name, domain: domain)
     reaction = StatusReaction.find_by(account: account, status: status, name: name, custom_emoji: custom_emoji)
     return reaction unless reaction.nil?

From 3103597d5d220bfef5f2a6ea3fbd7da742b4be9d Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sat, 13 Jan 2024 18:18:36 -0600
Subject: [PATCH 10/40] Make name of like content parser function more general

---
 app/lib/activitypub/activity/like.rb | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/app/lib/activitypub/activity/like.rb b/app/lib/activitypub/activity/like.rb
index f6c8769fee4cae..006382082549a4 100644
--- a/app/lib/activitypub/activity/like.rb
+++ b/app/lib/activitypub/activity/like.rb
@@ -5,7 +5,7 @@ def perform
     original_status = status_from_uri(object_uri)
     return if original_status.nil? || !original_status.account.local? || delete_arrived_first?(@json['id'])
 
-    return if maybe_process_misskey_reaction
+    return if maybe_process_embedded_reaction
 
     return if @account.favourited?(original_status)
 
@@ -15,10 +15,10 @@ def perform
     Trends.statuses.register(original_status)
   end
 
-  # Misskey delivers reactions as likes with the emoji in _misskey_reaction and content
-  # Versions of Misskey before 12.1.0 only specify emojis in _misskey_reaction, so we check both
+  # Some servers deliver reactions as likes with the emoji in content
+  # Versions of Misskey before 12.1.0 specify emojis in _misskey_reaction instead, so we check both
   # See https://misskey-hub.net/ns.html#misskey-reaction for details
-  def maybe_process_misskey_reaction
+  def maybe_process_embedded_reaction
     original_status = status_from_uri(object_uri)
     name = @json['content'] || @json['_misskey_reaction']
     return false if name.nil?

From c335db4a17977217c402efec6e315214e9184381 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 14 Jan 2024 15:47:55 -0600
Subject: [PATCH 11/40] Quick fixes

---
 .../flavours/glitch/features/status/components/action_bar.jsx   | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/javascript/flavours/glitch/features/status/components/action_bar.jsx b/app/javascript/flavours/glitch/features/status/components/action_bar.jsx
index 572167d285b046..57379a1b7e8d29 100644
--- a/app/javascript/flavours/glitch/features/status/components/action_bar.jsx
+++ b/app/javascript/flavours/glitch/features/status/components/action_bar.jsx
@@ -240,7 +240,7 @@ class ActionBar extends PureComponent {
     const canReact = signedIn && status.get('reactions').filter(r => r.get('count') > 0 && r.get('me')).size < maxReactions;
     const reactButton = (
       <IconButton
-        className='plus-icon'
+        className='add-reaction-icon'
         onClick={this.handleNoOp} // EmojiPickerDropdown handles that
         title={intl.formatMessage(messages.react)}
         disabled={!canReact}

From e11f8eb89aa0d52797c2feb4b5742427a61960ee Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 14 Jan 2024 15:59:27 -0600
Subject: [PATCH 12/40] Move reaction normalization to API controller

---
 .../api/v1/statuses/reactions_controller.rb           | 11 +++++++++--
 app/services/react_service.rb                         |  3 ---
 2 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/app/controllers/api/v1/statuses/reactions_controller.rb b/app/controllers/api/v1/statuses/reactions_controller.rb
index 2d7e4f59846220..1d8382f8331332 100644
--- a/app/controllers/api/v1/statuses/reactions_controller.rb
+++ b/app/controllers/api/v1/statuses/reactions_controller.rb
@@ -8,12 +8,12 @@ class Api::V1::Statuses::ReactionsController < Api::BaseController
   before_action :set_status
 
   def create
-    ReactService.new.call(current_account, @status, params[:id])
+    ReactService.new.call(current_account, @status, normalize(params[:id]))
     render json: @status, serializer: REST::StatusSerializer
   end
 
   def destroy
-    UnreactWorker.perform_async(current_account.id, @status.id, params[:id])
+    UnreactWorker.perform_async(current_account.id, @status.id, normalize(params[:id]))
 
     render json: @status, serializer: REST::StatusSerializer, relationships: StatusRelationshipsPresenter.new([@status], current_account.id, reactions_map: { @status.id => false })
   rescue Mastodon::NotPermittedError
@@ -22,6 +22,13 @@ def destroy
 
   private
 
+  def normalize(name)
+    normalized = "#{name}\uFE0F"
+    return normalized if StatusReactionValidator::SUPPORTED_EMOJIS.include?(normalized)
+
+    name
+  end
+
   def set_status
     @status = Status.find(params[:status_id])
     authorize @status, :show?
diff --git a/app/services/react_service.rb b/app/services/react_service.rb
index be19bd850179ed..cfc3f99a78041f 100644
--- a/app/services/react_service.rb
+++ b/app/services/react_service.rb
@@ -10,9 +10,6 @@ def call(account, status, emoji)
     name, domain = emoji.split('@')
     return unless domain.nil? || status.local?
 
-    normalized = "#{name}\uFE0F"
-    name = normalized if StatusReactionValidator::SUPPORTED_EMOJIS.include?(normalized)
-
     custom_emoji = CustomEmoji.find_by(shortcode: name, domain: domain)
     reaction = StatusReaction.find_by(account: account, status: status, name: name, custom_emoji: custom_emoji)
     return reaction unless reaction.nil?

From 67b47ded99a1f32a880b018b6e8ee88e44dfa55a Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Wed, 17 Jan 2024 18:04:11 -0600
Subject: [PATCH 13/40] Revert variant selector normalization

Probably worth tackling later, but for now it's not worth worrying about; some other implementations (e.g. Misskey's) look to have the same behavior anyways.
---
 .../api/v1/statuses/reactions_controller.rb           | 11 ++---------
 1 file changed, 2 insertions(+), 9 deletions(-)

diff --git a/app/controllers/api/v1/statuses/reactions_controller.rb b/app/controllers/api/v1/statuses/reactions_controller.rb
index 1d8382f8331332..2d7e4f59846220 100644
--- a/app/controllers/api/v1/statuses/reactions_controller.rb
+++ b/app/controllers/api/v1/statuses/reactions_controller.rb
@@ -8,12 +8,12 @@ class Api::V1::Statuses::ReactionsController < Api::BaseController
   before_action :set_status
 
   def create
-    ReactService.new.call(current_account, @status, normalize(params[:id]))
+    ReactService.new.call(current_account, @status, params[:id])
     render json: @status, serializer: REST::StatusSerializer
   end
 
   def destroy
-    UnreactWorker.perform_async(current_account.id, @status.id, normalize(params[:id]))
+    UnreactWorker.perform_async(current_account.id, @status.id, params[:id])
 
     render json: @status, serializer: REST::StatusSerializer, relationships: StatusRelationshipsPresenter.new([@status], current_account.id, reactions_map: { @status.id => false })
   rescue Mastodon::NotPermittedError
@@ -22,13 +22,6 @@ def destroy
 
   private
 
-  def normalize(name)
-    normalized = "#{name}\uFE0F"
-    return normalized if StatusReactionValidator::SUPPORTED_EMOJIS.include?(normalized)
-
-    name
-  end
-
   def set_status
     @status = Status.find(params[:status_id])
     authorize @status, :show?

From 5ef6470525fc458430c26f4cb21d13af58937239 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Thu, 18 Jan 2024 21:38:39 -0600
Subject: [PATCH 14/40] Update reaction emails

Reaction icon made by t3rminus@calamity.world
---
 .../images/mailer-new/heading/reaction.png    | Bin 0 -> 1763 bytes
 .../notification_mailer/reaction.html.haml    |  56 ++++--------------
 2 files changed, 12 insertions(+), 44 deletions(-)
 create mode 100644 app/javascript/images/mailer-new/heading/reaction.png

diff --git a/app/javascript/images/mailer-new/heading/reaction.png b/app/javascript/images/mailer-new/heading/reaction.png
new file mode 100644
index 0000000000000000000000000000000000000000..2e2969953ea48ce39b3fca7e1282717d04229a84
GIT binary patch
literal 1763
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
N5OZUkQH239<}WIbu$uq?

literal 0
HcmV?d00001

diff --git a/app/views/notification_mailer/reaction.html.haml b/app/views/notification_mailer/reaction.html.haml
index 83ae41927d3f99..32427d58e5177f 100644
--- a/app/views/notification_mailer/reaction.html.haml
+++ b/app/views/notification_mailer/reaction.html.haml
@@ -1,45 +1,13 @@
-%table.email-table{ cellspacing: 0, cellpadding: 0 }
-  %tbody
-    %tr
-      %td.email-body
-        .email-container
-          %table.content-section{ cellspacing: 0, cellpadding: 0 }
-            %tbody
+= content_for :heading do
+  = render 'application/mailer/heading', heading_title: t('notification_mailer.reaction.title'), heading_subtitle: t('notification_mailer.reaction.body', name: @account.pretty_acct), heading_image_url: frontend_asset_url('images/mailer-new/heading/reaction.png')
+%table.email-w-full{ cellspacing: 0, cellpadding: 0, border: 0, role: 'presentation' }
+  %tr
+    %td.email-body-padding-td
+      %table.email-inner-card-table{ cellspacing: 0, cellpadding: 0, border: 0, role: 'presentation' }
+        %tr
+          %td.email-inner-card-td
+            = render 'status', status: @status, time_zone: @me.user_time_zone
+            %table.email-w-full{ cellspacing: 0, cellpadding: 0, border: 0, role: 'presentation' }
               %tr
-                %td.content-cell.hero
-                  .email-row
-                    .col-6
-                      %table.column{ cellspacing: 0, cellpadding: 0 }
-                        %tbody
-                          %tr
-                            %td.column-cell.text-center.padded
-                              %table.hero-icon{ align: 'center', cellspacing: 0, cellpadding: 0 }
-                                %tbody
-                                  %tr
-                                    %td
-                                      = image_tag full_pack_url('media/images/mailer/icon_add.png'), alt: ''
-
-                              %h1= t 'notification_mailer.reaction.title'
-                              %p.lead= t('notification_mailer.reaction.body', name: @account.pretty_acct)
-
-= render 'status', status: @status, time_zone: @me.user_time_zone
-
-%table.email-table{ cellspacing: 0, cellpadding: 0 }
-  %tbody
-    %tr
-      %td.email-body
-        .email-container
-          %table.content-section{ cellspacing: 0, cellpadding: 0 }
-            %tbody
-              %tr
-                %td.content-cell.content-start.border-top
-                  %table.column{ cellspacing: 0, cellpadding: 0 }
-                    %tbody
-                      %tr
-                        %td.column-cell.button-cell
-                          %table.button{ align: 'center', cellspacing: 0, cellpadding: 0 }
-                            %tbody
-                              %tr
-                                %td.button-primary
-                                  = link_to web_url("@#{@status.account.pretty_acct}/#{@status.id}") do
-                                    %span= t 'application_mailer.view_status'
+                %td.email-padding-top-24
+                  = render 'application/mailer/button', text: t('application_mailer.view_status'), url: web_url("@#{@status.account.pretty_acct}/#{@status.id}")

From c5c0aa32c4ef9a15f0326cee057b30232d673c26 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Tue, 23 Jan 2024 22:59:42 -0600
Subject: [PATCH 15/40] Simplify reactions API controller

---
 .../api/v1/statuses/reactions_controller.rb        | 14 +-------------
 1 file changed, 1 insertion(+), 13 deletions(-)

diff --git a/app/controllers/api/v1/statuses/reactions_controller.rb b/app/controllers/api/v1/statuses/reactions_controller.rb
index 2d7e4f59846220..c4b0fa307f419a 100644
--- a/app/controllers/api/v1/statuses/reactions_controller.rb
+++ b/app/controllers/api/v1/statuses/reactions_controller.rb
@@ -1,11 +1,8 @@
 # frozen_string_literal: true
 
-class Api::V1::Statuses::ReactionsController < Api::BaseController
-  include Authorization
-
+class Api::V1::Statuses::ReactionsController < Api::V1::Statuses::BaseController
   before_action -> { doorkeeper_authorize! :write, :'write:favourites' }
   before_action :require_user!
-  before_action :set_status
 
   def create
     ReactService.new.call(current_account, @status, params[:id])
@@ -19,13 +16,4 @@ def destroy
   rescue Mastodon::NotPermittedError
     not_found
   end
-
-  private
-
-  def set_status
-    @status = Status.find(params[:status_id])
-    authorize @status, :show?
-  rescue Mastodon::NotPermittedError
-    not_found
-  end
 end

From 266fd452e742a1535a95483d77b9c12560ca5acb Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Wed, 24 Jan 2024 17:50:58 -0600
Subject: [PATCH 16/40] Refactor status reactions query

This was done to announcement reactions in 1b0cb3b54d1a1b08922527aefc8135d56d3a1a8d. Might as well do it here too.
---
 app/models/status.rb | 46 ++++++++++++++++++++++++++++++++------------
 1 file changed, 34 insertions(+), 12 deletions(-)

diff --git a/app/models/status.rb b/app/models/status.rb
index 61c903ad128c5f..b1435194ee994d 100644
--- a/app/models/status.rb
+++ b/app/models/status.rb
@@ -288,20 +288,13 @@ def emojis
   end
 
   def reactions(account = nil)
-    records = begin
-      scope = status_reactions.group(:status_id, :name, :custom_emoji_id).order(Arel.sql('MIN(created_at) ASC'))
-
-      if account.nil?
-        scope.select('name, custom_emoji_id, count(*) as count, false as me')
-      else
-        # rubocop:disable Layout/LineLength
-        scope.select("name, custom_emoji_id, count(*) as count, exists(select 1 from status_reactions r where r.account_id = #{account.id} and r.status_id = status_reactions.status_id and r.name = status_reactions.name and (r.custom_emoji_id = status_reactions.custom_emoji_id or r.custom_emoji_id is null and status_reactions.custom_emoji_id is null)) as me")
-        # rubocop:enable Layout/LineLength
+    grouped_ordered_status_reactions.select(
+      [:name, :custom_emoji_id, 'COUNT(*) as count'].tap do |values|
+        values << value_for_reaction_me_column(account)
       end
+    ).to_a.tap do |records|
+      ActiveRecord::Associations::Preloader.new(records: records, associations: :custom_emoji).call
     end
-
-    ActiveRecord::Associations::Preloader.new(records: records, associations: :custom_emoji)
-    records
   end
 
   def ordered_media_attachments
@@ -477,6 +470,35 @@ def unlink_from_conversations!
 
   private
 
+  def grouped_ordered_status_reactions
+    status_reactions
+      .group(:status_id, :name, :custom_emoji_id)
+      .order(
+        Arel.sql('MIN(created_at)').asc
+      )
+  end
+
+  def value_for_reaction_me_column(account)
+    if account.nil?
+      'FALSE AS me'
+    else
+      <<~SQL.squish
+        EXISTS(
+          SELECT 1
+          FROM status_reactions inner_reactions
+          WHERE inner_reactions.account_id = #{account.id}
+            AND inner_reactions.status_id = status_reactions.status_id
+            AND inner_reactions.name = status_reactions.name
+            AND (
+              inner_reactions.custom_emoji_id = status_reactions.custom_emoji_id
+              OR inner_reactions.custom_emoji_id IS NULL
+                AND status_reactions.custom_emoji_id IS NULL
+            )
+        ) AS me
+      SQL
+    end
+  end
+
   def update_status_stat!(attrs)
     return if marked_for_destruction? || destroyed?
 

From b39a7bab233a76d1478dd7329c38466097bc4f85 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 28 Jan 2024 14:51:10 -0600
Subject: [PATCH 17/40] Fix rubocop lint issue

---
 app/models/concerns/account/interactions.rb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/models/concerns/account/interactions.rb b/app/models/concerns/account/interactions.rb
index 4d104711e8509d..cd6c63bab9543c 100644
--- a/app/models/concerns/account/interactions.rb
+++ b/app/models/concerns/account/interactions.rb
@@ -239,7 +239,7 @@ def favourited?(status)
   end
 
   def reacted?(status, name, custom_emoji = nil)
-    status.proper.status_reactions.where(account: self, name: name, custom_emoji: custom_emoji).exists?
+    status.proper.status_reactions.exists?(account: self, name: name, custom_emoji: custom_emoji)
   end
 
   def bookmarked?(status)

From 7ed43a49c563ed656673e5a041fc3fcb14b60477 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Wed, 7 Feb 2024 17:14:16 -0600
Subject: [PATCH 18/40] Purge status reactions on account delete

---
 app/services/delete_account_service.rb | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/app/services/delete_account_service.rb b/app/services/delete_account_service.rb
index 20d6ee8d64eb8b..118a7c8418e713 100644
--- a/app/services/delete_account_service.rb
+++ b/app/services/delete_account_service.rb
@@ -150,6 +150,7 @@ def purge_content!
     purge_polls!
     purge_generated_notifications!
     purge_favourites!
+    purge_status_reactions!
     purge_bookmarks!
     purge_feeds!
     purge_other_associations!
@@ -197,6 +198,15 @@ def purge_favourites!
     end
   end
 
+  def purge_status_reactions!
+    @account.status_reactions.in_batches do |status_reactions|
+      ids = status_reactions.pluck(:status_id)
+      Chewy.strategy.current.update(StatusesIndex, ids) if Chewy.enabled?
+      Rails.cache.delete_multi(ids.map { |id| "statuses/#{id}" })
+      status_reactions.delete_all
+    end
+  end
+
   def purge_bookmarks!
     @account.bookmarks.in_batches do |bookmarks|
       Chewy.strategy.current.update(StatusesIndex, bookmarks.pluck(:status_id)) if Chewy.enabled?

From 754c1ed8b1ae5e1a64f44a9aae25e323615c644e Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Fri, 9 Feb 2024 17:42:19 -0600
Subject: [PATCH 19/40] Hydrate reactions on streaming API

---
 app/lib/status_cache_hydrator.rb          | 12 ++++++++++++
 app/models/status.rb                      | 10 +++++-----
 app/serializers/rest/status_serializer.rb |  2 +-
 3 files changed, 18 insertions(+), 6 deletions(-)

diff --git a/app/lib/status_cache_hydrator.rb b/app/lib/status_cache_hydrator.rb
index a06e070c3d7bc5..3bbd7d4d098d49 100644
--- a/app/lib/status_cache_hydrator.rb
+++ b/app/lib/status_cache_hydrator.rb
@@ -61,6 +61,7 @@ def hydrate_reblog_payload(empty_payload, account_id, nested: false)
       payload[:filtered]   = payload[:reblog][:filtered]
       payload[:favourited] = payload[:reblog][:favourited]
       payload[:reblogged]  = payload[:reblog][:reblogged]
+      payload[:reactions]  = payload[:reblog][:reactions]
     end
   end
 
@@ -71,6 +72,7 @@ def fill_status_payload(payload, status, account_id, nested: false)
     payload[:bookmarked] = Bookmark.exists?(account_id: account_id, status_id: status.id)
     payload[:pinned]     = StatusPin.exists?(account_id: account_id, status_id: status.id) if status.account_id == account_id
     payload[:filtered]   = mapped_applied_custom_filter(account_id, status)
+    payload[:reactions]  = serialized_reactions(account_id)
     payload[:quote] = hydrate_quote_payload(payload[:quote], status.quote, account_id, nested:) if payload[:quote]
   end
 
@@ -111,6 +113,16 @@ def serialized_filter(filter)
     ).as_json
   end
 
+  def serialized_reactions(account_id)
+    reactions = @status.reactions(account_id)
+    ActiveModelSerializers::SerializableResource.new(
+      reactions,
+      each_serializer: REST::ReactionSerializer,
+      scope: account_id, # terrible
+      scope_name: :current_user
+    ).as_json
+  end
+
   def payload_application
     @status.application.present? ? serialized_status_application_json : nil
   end
diff --git a/app/models/status.rb b/app/models/status.rb
index b1435194ee994d..4027a27fb28fc8 100644
--- a/app/models/status.rb
+++ b/app/models/status.rb
@@ -287,10 +287,10 @@ def emojis
     @emojis = CustomEmoji.from_text(fields.join(' '), account.domain)
   end
 
-  def reactions(account = nil)
+  def reactions(account_id = nil)
     grouped_ordered_status_reactions.select(
       [:name, :custom_emoji_id, 'COUNT(*) as count'].tap do |values|
-        values << value_for_reaction_me_column(account)
+        values << value_for_reaction_me_column(account_id)
       end
     ).to_a.tap do |records|
       ActiveRecord::Associations::Preloader.new(records: records, associations: :custom_emoji).call
@@ -478,15 +478,15 @@ def grouped_ordered_status_reactions
       )
   end
 
-  def value_for_reaction_me_column(account)
-    if account.nil?
+  def value_for_reaction_me_column(account_id)
+    if account_id.nil?
       'FALSE AS me'
     else
       <<~SQL.squish
         EXISTS(
           SELECT 1
           FROM status_reactions inner_reactions
-          WHERE inner_reactions.account_id = #{account.id}
+          WHERE inner_reactions.account_id = #{account_id}
             AND inner_reactions.status_id = status_reactions.status_id
             AND inner_reactions.name = status_reactions.name
             AND (
diff --git a/app/serializers/rest/status_serializer.rb b/app/serializers/rest/status_serializer.rb
index 1e1c9d24e57516..fba15f0073c9ce 100644
--- a/app/serializers/rest/status_serializer.rb
+++ b/app/serializers/rest/status_serializer.rb
@@ -165,7 +165,7 @@ def ordered_mentions
   end
 
   def reactions
-    object.reactions(current_user&.account)
+    object.reactions(current_user&.account&.id)
   end
 
   private

From a21bd730dee9507a34278889a32ed5416b9b5c81 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sat, 24 Feb 2024 16:22:40 -0600
Subject: [PATCH 20/40] Merge fixes

---
 .../features/compose/components/emoji_picker_dropdown.jsx       | 1 -
 app/javascript/flavours/glitch/styles/components.scss           | 2 ++
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx b/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx
index 0c449cfa89ec3e..5210b26d2373f3 100644
--- a/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx
+++ b/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx
@@ -393,7 +393,6 @@ class EmojiPickerDropdown extends PureComponent {
           active={active}
           iconComponent={MoodIcon}
           onClick={this.onToggle}
-          inverted
         />
 
         <Overlay show={active} placement={placement} flip target={this.findTarget} popperConfig={{ strategy: 'fixed', onFirstUpdate: this.handleOverlayEnter }}>
diff --git a/app/javascript/flavours/glitch/styles/components.scss b/app/javascript/flavours/glitch/styles/components.scss
index b89c428550adeb..6ace6a46e1e85e 100644
--- a/app/javascript/flavours/glitch/styles/components.scss
+++ b/app/javascript/flavours/glitch/styles/components.scss
@@ -8987,6 +8987,8 @@ noscript {
   }
 
   &--empty {
+    margin-top: 0;
+
     .emoji-button {
       padding: 0;
     }

From 702ee07bb29e66af612a0d24cf0ddf5924c04184 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sat, 24 Feb 2024 17:20:38 -0600
Subject: [PATCH 21/40] Fix reaction picker dropdown appearance

---
 .../glitch/components/status_action_bar.jsx   | 18 +----------------
 .../glitch/components/status_prepend.jsx      |  6 +++---
 .../components/emoji_picker_dropdown.jsx      | 10 ++++++----
 .../features/status/components/action_bar.jsx | 20 +------------------
 .../flavours/glitch/styles/components.scss    |  8 ++++++--
 5 files changed, 17 insertions(+), 45 deletions(-)

diff --git a/app/javascript/flavours/glitch/components/status_action_bar.jsx b/app/javascript/flavours/glitch/components/status_action_bar.jsx
index c8d99fd623c031..9c3d6fd3df82c2 100644
--- a/app/javascript/flavours/glitch/components/status_action_bar.jsx
+++ b/app/javascript/flavours/glitch/components/status_action_bar.jsx
@@ -215,8 +215,6 @@ class StatusActionBar extends ImmutablePureComponent {
     this.props.onAddFilter(this.props.status);
   };
 
-  handleNoOp = () => {}; // hack for reaction add button
-
   render () {
     const { status, intl, withDismiss, withCounters, showReplyCount, scrollKey } = this.props;
     const { permissions, signedIn } = this.props.identity;
@@ -333,16 +331,6 @@ class StatusActionBar extends ImmutablePureComponent {
     );
 
     const canReact = permissions && status.get('reactions').filter(r => r.get('count') > 0 && r.get('me')).size < maxReactions;
-    const reactButton = (
-      <IconButton
-        className='status__action-bar-button'
-        onClick={this.handleNoOp} // EmojiPickerDropdown handles that
-        title={intl.formatMessage(messages.react)}
-        disabled={!canReact}
-        icon='add_reaction'
-        iconComponent={AddReactionIcon}
-      />
-    );
     const bookmarkTitle = intl.formatMessage(status.get('bookmarked') ? messages.removeBookmark : messages.bookmark);
     const favouriteTitle = intl.formatMessage(status.get('favourited') ? messages.removeFavourite : messages.favourite);
 
@@ -366,11 +354,7 @@ class StatusActionBar extends ImmutablePureComponent {
           <IconButton className='status__action-bar-button star-icon' animate active={status.get('favourited')} title={favouriteTitle} icon='star' iconComponent={status.get('favourited') ? StarIcon : StarBorderIcon} onClick={this.handleFavouriteClick} counter={withCounters ? status.get('favourites_count') : undefined} />
         </div>
         <div className='status__action-bar__button-wrapper'>
-          {
-            permissions
-              ? <EmojiPickerDropdown className='status__action-bar-button' onPickEmoji={this.handleEmojiPick} button={reactButton} disabled={!canReact} />
-              : reactButton
-          }
+          <EmojiPickerDropdown className='status__action-bar-button' onPickEmoji={this.handleEmojiPick} title={intl.formatMessage(messages.react)} icon={AddReactionIcon} disabled={!canReact} />
         </div>
         <div className='status__action-bar__button-wrapper'>
           <IconButton className='status__action-bar-button bookmark-icon' disabled={!signedIn} active={status.get('bookmarked')} title={bookmarkTitle} icon='bookmark' iconComponent={status.get('bookmarked') ? BookmarkIcon : BookmarkBorderIcon} onClick={this.handleBookmarkClick} />
diff --git a/app/javascript/flavours/glitch/components/status_prepend.jsx b/app/javascript/flavours/glitch/components/status_prepend.jsx
index 8c5b51bfcdea7c..b3b568b5c14f81 100644
--- a/app/javascript/flavours/glitch/components/status_prepend.jsx
+++ b/app/javascript/flavours/glitch/components/status_prepend.jsx
@@ -6,10 +6,10 @@ import { FormattedMessage } from 'react-intl';
 
 import ImmutablePropTypes from 'react-immutable-proptypes';
 
-import AddReactionIcon from '@/material-icons/400-24px/add_reaction.svg?react';
 import EditIcon from '@/material-icons/400-24px/edit.svg?react';
 import HomeIcon from '@/material-icons/400-24px/home-fill.svg?react';
 import InsertChartIcon from '@/material-icons/400-24px/insert_chart.svg?react';
+import MoodIcon from '@/material-icons/400-24px/mood.svg?react';
 import PushPinIcon from '@/material-icons/400-24px/push_pin.svg?react';
 import RepeatIcon from '@/material-icons/400-24px/repeat.svg?react';
 import StarIcon from '@/material-icons/400-24px/star-fill.svg?react';
@@ -126,8 +126,8 @@ export default class StatusPrepend extends PureComponent {
       iconComponent = StarIcon;
       break;
     case 'reaction':
-      iconId = 'add_reaction';
-      iconComponent = AddReactionIcon;
+      iconId = 'mood';
+      iconComponent = MoodIcon;
       break;
     case 'featured':
       iconId = 'thumb-tack';
diff --git a/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx b/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx
index 5210b26d2373f3..47124399338d2b 100644
--- a/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx
+++ b/app/javascript/flavours/glitch/features/compose/components/emoji_picker_dropdown.jsx
@@ -318,6 +318,8 @@ class EmojiPickerDropdown extends PureComponent {
     onPickEmoji: PropTypes.func.isRequired,
     onSkinTone: PropTypes.func.isRequired,
     skinTone: PropTypes.number.isRequired,
+    title: PropTypes.string,
+    icon: PropTypes.node,
     disabled: PropTypes.bool,
   };
 
@@ -381,17 +383,17 @@ class EmojiPickerDropdown extends PureComponent {
   };
 
   render() {
-    const { intl, onPickEmoji, onSkinTone, skinTone, frequentlyUsedEmojis } = this.props;
-    const title = intl.formatMessage(messages.emoji);
+    const { intl, onPickEmoji, onSkinTone, skinTone, frequentlyUsedEmojis, title, icon, disabled } = this.props;
     const { active, loading, placement } = this.state;
 
     return (
       <div className='emoji-picker-dropdown' onKeyDown={this.handleKeyDown} ref={this.setTargetRef}>
         <IconButton
-          title={title}
+          title={title || intl.formatMessage(messages.emoji)}
           aria-expanded={active}
           active={active}
-          iconComponent={MoodIcon}
+          disabled={disabled}
+          iconComponent={icon || MoodIcon}
           onClick={this.onToggle}
         />
 
diff --git a/app/javascript/flavours/glitch/features/status/components/action_bar.jsx b/app/javascript/flavours/glitch/features/status/components/action_bar.jsx
index 57379a1b7e8d29..3fe6b37726dac3 100644
--- a/app/javascript/flavours/glitch/features/status/components/action_bar.jsx
+++ b/app/javascript/flavours/glitch/features/status/components/action_bar.jsx
@@ -159,8 +159,6 @@ class ActionBar extends PureComponent {
     navigator.clipboard.writeText(url);
   };
 
-  handleNoOp = () => {}; // hack for reaction add button
-
   render () {
     const { status, intl } = this.props;
     const { signedIn, permissions } = this.props.identity;
@@ -238,16 +236,6 @@ class ActionBar extends PureComponent {
     }
 
     const canReact = signedIn && status.get('reactions').filter(r => r.get('count') > 0 && r.get('me')).size < maxReactions;
-    const reactButton = (
-      <IconButton
-        className='add-reaction-icon'
-        onClick={this.handleNoOp} // EmojiPickerDropdown handles that
-        title={intl.formatMessage(messages.react)}
-        disabled={!canReact}
-        icon='add_reaction'
-        iconComponent={AddReactionIcon}
-      />
-    );
 
     const reblogPrivate = status.getIn(['account', 'id']) === me && status.get('visibility') === 'private';
 
@@ -275,13 +263,7 @@ class ActionBar extends PureComponent {
         <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.reply)} icon={replyIcon} iconComponent={replyIconComponent} onClick={this.handleReplyClick} /></div>
         <div className='detailed-status__button'><IconButton className={classNames({ reblogPrivate })} disabled={!publicStatus && !reblogPrivate} active={status.get('reblogged')} title={reblogTitle} icon='retweet' iconComponent={reblogIconComponent} onClick={this.handleReblogClick} /></div>
         <div className='detailed-status__button'><IconButton className='star-icon' animate active={status.get('favourited')} title={favouriteTitle} icon='star' iconComponent={status.get('favourited') ? StarIcon : StarBorderIcon} onClick={this.handleFavouriteClick} /></div>
-        <div className='detailed-status__button'>
-          {
-            signedIn
-              ? <EmojiPickerDropdown onPickEmoji={this.handleEmojiPick} button={reactButton} disabled={!canReact} />
-              : reactButton
-          }
-        </div>
+        <div className='detailed-status__button'><EmojiPickerDropdown onPickEmoji={this.handleEmojiPick} title={intl.formatMessage(messages.react)} icon={AddReactionIcon} disabled={!canReact} /></div>
         <div className='detailed-status__button'><IconButton className='bookmark-icon' disabled={!signedIn} active={status.get('bookmarked')} title={bookmarkTitle} icon='bookmark' iconComponent={status.get('bookmarked') ? BookmarkIcon : BookmarkBorderIcon} onClick={this.handleBookmarkClick} /></div>
 
         <div className='detailed-status__action-bar-dropdown'>
diff --git a/app/javascript/flavours/glitch/styles/components.scss b/app/javascript/flavours/glitch/styles/components.scss
index 6ace6a46e1e85e..6e809d802b4350 100644
--- a/app/javascript/flavours/glitch/styles/components.scss
+++ b/app/javascript/flavours/glitch/styles/components.scss
@@ -1805,8 +1805,12 @@ body > [data-popper-placement] {
     flex-grow: 1;
   }
 
-  & > .emoji-picker-dropdown > .emoji-button {
-    padding: 0;
+  & > .emoji-picker-dropdown {
+    height: 24px;
+
+    > .emoji-button {
+      padding: 0;
+    }
   }
 }
 

From 274947020f2410e8dfbd1d2eb73d95587ebb4fe0 Mon Sep 17 00:00:00 2001
From: Jeremy Kescher <jeremy@kescher.at>
Date: Tue, 21 May 2024 00:46:17 +0200
Subject: [PATCH 22/40] [Glitch+Emoji reactions] Use modern React context for
 for identity for emoji reaction code

---
 app/javascript/flavours/glitch/components/status.jsx     | 7 +++++--
 app/javascript/flavours/glitch/features/status/index.jsx | 4 ++--
 2 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/app/javascript/flavours/glitch/components/status.jsx b/app/javascript/flavours/glitch/components/status.jsx
index d98efe33700f17..752963da9e50e9 100644
--- a/app/javascript/flavours/glitch/components/status.jsx
+++ b/app/javascript/flavours/glitch/components/status.jsx
@@ -11,6 +11,7 @@ import { HotKeys } from 'react-hotkeys';
 
 import { ContentWarning } from 'flavours/glitch/components/content_warning';
 import { PictureInPicturePlaceholder } from 'flavours/glitch/components/picture_in_picture_placeholder';
+import { identityContextPropShape, withIdentity } from 'flavours/glitch/identity_context';
 import { autoUnfoldCW } from 'flavours/glitch/utils/content_warning';
 import { withOptionalRouter, WithOptionalRouterPropTypes } from 'flavours/glitch/utils/react_router';
 
@@ -79,6 +80,7 @@ class Status extends ImmutablePureComponent {
   static contextType = SensitiveMediaContext;
 
   static propTypes = {
+    identity: identityContextPropShape,
     containerId: PropTypes.string,
     id: PropTypes.string,
     status: ImmutablePropTypes.map,
@@ -457,6 +459,7 @@ class Status extends ImmutablePureComponent {
       onOpenMedia,
       notification,
       history,
+      identity,
       isQuotedPost,
       ...other
     } = this.props;
@@ -755,7 +758,7 @@ class Status extends ImmutablePureComponent {
               numVisible={visibleReactions}
               addReaction={this.props.onReactionAdd}
               removeReaction={this.props.onReactionRemove}
-              canReact={this.context.identity.signedIn}
+              canReact={this.props.identity.signedIn}
             />
 
             {!isQuotedPost &&
@@ -775,4 +778,4 @@ class Status extends ImmutablePureComponent {
 
 }
 
-export default withOptionalRouter(injectIntl(Status));
+export default withOptionalRouter(injectIntl((withIdentity(Status))));
diff --git a/app/javascript/flavours/glitch/features/status/index.jsx b/app/javascript/flavours/glitch/features/status/index.jsx
index ffe72428c5a100..2f0bbe19972fb6 100644
--- a/app/javascript/flavours/glitch/features/status/index.jsx
+++ b/app/javascript/flavours/glitch/features/status/index.jsx
@@ -227,8 +227,8 @@ class Status extends ImmutablePureComponent {
   };
 
   handleReactionAdd = (statusId, name, url) => {
-    const { dispatch } = this.props;
-    const { signedIn } = this.context.identity;
+    const { dispatch, identity } = this.props;
+    const { signedIn } = identity;
 
     if (signedIn) {
       dispatch(addReaction(statusId, name, url));

From 953bac25b4c174b25e63ed2d3b31b1e15e3bb8be Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 16 Jun 2024 14:30:22 -0500
Subject: [PATCH 23/40] Disable reactions in detailed status view when
 visibleReactions is 0

---
 .../status/components/detailed_status.tsx       | 17 ++++++++++-------
 1 file changed, 10 insertions(+), 7 deletions(-)

diff --git a/app/javascript/flavours/glitch/features/status/components/detailed_status.tsx b/app/javascript/flavours/glitch/features/status/components/detailed_status.tsx
index 55cceab01c2972..c263a95903092d 100644
--- a/app/javascript/flavours/glitch/features/status/components/detailed_status.tsx
+++ b/app/javascript/flavours/glitch/features/status/components/detailed_status.tsx
@@ -34,6 +34,7 @@ import { Audio } from 'flavours/glitch/features/audio';
 import scheduleIdleTask from 'flavours/glitch/features/ui/util/schedule_idle_task';
 import { Video } from 'flavours/glitch/features/video';
 import { useIdentity } from 'flavours/glitch/identity_context';
+import { visibleReactions } from 'flavours/glitch/initial_state';
 import { useAppSelector } from 'flavours/glitch/store';
 
 import Card from './card';
@@ -433,13 +434,15 @@ export const DetailedStatus: React.FC<{
         {/* This is a glitch-soc addition to have a placeholder */}
         {!expanded && <MentionsPlaceholder status={status} />}
 
-        <StatusReactions
-          statusId={status.get('id')}
-          reactions={status.get('reactions')}
-          addReaction={onReactionAdd}
-          removeReaction={onReactionRemove}
-          canReact={signedIn}
-        />
+        {visibleReactions && visibleReactions > 0 && (
+          <StatusReactions
+            statusId={status.get('id')}
+            reactions={status.get('reactions')}
+            addReaction={onReactionAdd}
+            removeReaction={onReactionRemove}
+            canReact={signedIn}
+          />
+        )}
 
         <div className='detailed-status__meta'>
           <div className='detailed-status__meta__line'>

From d5867135e545bea96eb1bf282ea7a0ab8571b3f7 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Tue, 18 Jun 2024 14:10:37 -0500
Subject: [PATCH 24/40] Turn custom emoji regexps into class level constants

---
 app/lib/activitypub/activity/emoji_react.rb | 4 +++-
 app/lib/activitypub/activity/like.rb        | 4 +++-
 app/lib/activitypub/activity/undo.rb        | 4 +++-
 3 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/app/lib/activitypub/activity/emoji_react.rb b/app/lib/activitypub/activity/emoji_react.rb
index c9d88bc51c2605..ad9f9abbaa3b99 100644
--- a/app/lib/activitypub/activity/emoji_react.rb
+++ b/app/lib/activitypub/activity/emoji_react.rb
@@ -1,6 +1,8 @@
 # frozen_string_literal: true
 
 class ActivityPub::Activity::EmojiReact < ActivityPub::Activity
+  CUSTOM_EMOJI_REGEX = /^:[^:]+:$/
+
   def perform
     original_status = status_from_uri(object_uri)
     name = @json['content']
@@ -8,7 +10,7 @@ def perform
               !original_status.account.local? ||
               delete_arrived_first?(@json['id'])
 
-    if /^:.*:$/.match?(name)
+    if CUSTOM_EMOJI_REGEX.match?(name)
       name.delete! ':'
       custom_emoji = process_emoji_tags(name, @json['tag'])
 
diff --git a/app/lib/activitypub/activity/like.rb b/app/lib/activitypub/activity/like.rb
index 006382082549a4..8856f7be4c1dcd 100644
--- a/app/lib/activitypub/activity/like.rb
+++ b/app/lib/activitypub/activity/like.rb
@@ -1,6 +1,8 @@
 # frozen_string_literal: true
 
 class ActivityPub::Activity::Like < ActivityPub::Activity
+  CUSTOM_EMOJI_REGEX = /^:[^:]+:$/
+
   def perform
     original_status = status_from_uri(object_uri)
     return if original_status.nil? || !original_status.account.local? || delete_arrived_first?(@json['id'])
@@ -23,7 +25,7 @@ def maybe_process_embedded_reaction
     name = @json['content'] || @json['_misskey_reaction']
     return false if name.nil?
 
-    if /^:.*:$/.match?(name)
+    if CUSTOM_EMOJI_REGEX.match?(name)
       name.delete! ':'
       custom_emoji = process_emoji_tags(name, @json['tag'])
 
diff --git a/app/lib/activitypub/activity/undo.rb b/app/lib/activitypub/activity/undo.rb
index 5f9f1bbecbfaf1..0c7714d6edf0e3 100644
--- a/app/lib/activitypub/activity/undo.rb
+++ b/app/lib/activitypub/activity/undo.rb
@@ -1,6 +1,8 @@
 # frozen_string_literal: true
 
 class ActivityPub::Activity::Undo < ActivityPub::Activity
+  CUSTOM_EMOJI_REGEX = /^:[^:]+:$/
+
   def perform
     case @object['type']
     when 'Announce'
@@ -125,7 +127,7 @@ def undo_emoji_react
 
     return if status.nil? || !status.account.local?
 
-    if /^:.*:$/.match?(name)
+    if CUSTOM_EMOJI_REGEX.match?(name)
       name.delete! ':'
       custom_emoji = process_emoji_tags(name, @object['tag'])
 

From 7e5b67eed46ce9e6518b72be93dcdf52c366db51 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Thu, 18 Jul 2024 21:01:46 -0500
Subject: [PATCH 25/40] Add notification grouping for reactions

---
 .../glitch/api_types/notifications.ts         |  2 ++
 .../components/notification_group.tsx         |  9 +++++
 .../components/notification_reaction.tsx      | 34 +++++++++++++++++++
 .../features/notifications_v2/filter_bar.tsx  | 13 +++++++
 .../glitch/models/notification_group.ts       |  4 +++
 .../flavours/glitch/styles/components.scss    |  4 +++
 app/models/concerns/notification/groups.rb    |  4 +--
 .../rest/notification_group_serializer.rb     |  2 +-
 8 files changed, 69 insertions(+), 3 deletions(-)
 create mode 100644 app/javascript/flavours/glitch/features/notifications_v2/components/notification_reaction.tsx

diff --git a/app/javascript/flavours/glitch/api_types/notifications.ts b/app/javascript/flavours/glitch/api_types/notifications.ts
index d173083dbd2143..1f3bc4d1ebcd28 100644
--- a/app/javascript/flavours/glitch/api_types/notifications.ts
+++ b/app/javascript/flavours/glitch/api_types/notifications.ts
@@ -11,6 +11,7 @@ export const allNotificationTypes = [
   'follow',
   'follow_request',
   'favourite',
+  'reaction',
   'reblog',
   'mention',
   'poll',
@@ -25,6 +26,7 @@ export const allNotificationTypes = [
 
 export type NotificationWithStatusType =
   | 'favourite'
+  | 'reaction'
   | 'reblog'
   | 'status'
   | 'mention'
diff --git a/app/javascript/flavours/glitch/features/notifications_v2/components/notification_group.tsx b/app/javascript/flavours/glitch/features/notifications_v2/components/notification_group.tsx
index 9bd6c27a86acd8..800df28ced6022 100644
--- a/app/javascript/flavours/glitch/features/notifications_v2/components/notification_group.tsx
+++ b/app/javascript/flavours/glitch/features/notifications_v2/components/notification_group.tsx
@@ -16,6 +16,7 @@ import { NotificationFollowRequest } from './notification_follow_request';
 import { NotificationMention } from './notification_mention';
 import { NotificationModerationWarning } from './notification_moderation_warning';
 import { NotificationPoll } from './notification_poll';
+import { NotificationReaction } from './notification_reaction';
 import { NotificationReblog } from './notification_reblog';
 import { NotificationSeveredRelationships } from './notification_severed_relationships';
 import { NotificationStatus } from './notification_status';
@@ -79,6 +80,14 @@ export const NotificationGroup: React.FC<{
         />
       );
       break;
+    case 'reaction':
+      content = (
+        <NotificationReaction
+          unread={unread}
+          notification={notificationGroup}
+        />
+      );
+      break;
     case 'severed_relationships':
       content = (
         <NotificationSeveredRelationships
diff --git a/app/javascript/flavours/glitch/features/notifications_v2/components/notification_reaction.tsx b/app/javascript/flavours/glitch/features/notifications_v2/components/notification_reaction.tsx
new file mode 100644
index 00000000000000..95dd4d850a8ed4
--- /dev/null
+++ b/app/javascript/flavours/glitch/features/notifications_v2/components/notification_reaction.tsx
@@ -0,0 +1,34 @@
+import { FormattedMessage } from 'react-intl';
+
+import MoodIcon from '@/material-icons/400-24px/mood.svg?react';
+import type { NotificationGroupReaction } from 'flavours/glitch/models/notification_group';
+
+import type { LabelRenderer } from './notification_group_with_status';
+import { NotificationGroupWithStatus } from './notification_group_with_status';
+
+const labelRenderer: LabelRenderer = (values) => (
+  <FormattedMessage
+    id='notification.reaction'
+    defaultMessage='{name} reacted to your status'
+    values={values}
+  />
+);
+
+export const NotificationReaction: React.FC<{
+  notification: NotificationGroupReaction;
+  unread: boolean;
+}> = ({ notification, unread }) => {
+  return (
+    <NotificationGroupWithStatus
+      type='reaction'
+      icon={MoodIcon}
+      iconId='react'
+      accountIds={notification.sampleAccountIds}
+      statusId={notification.statusId}
+      timestamp={notification.latest_page_notification_at}
+      count={notification.notifications_count}
+      labelRenderer={labelRenderer}
+      unread={unread}
+    />
+  );
+};
diff --git a/app/javascript/flavours/glitch/features/notifications_v2/filter_bar.tsx b/app/javascript/flavours/glitch/features/notifications_v2/filter_bar.tsx
index d9a6b4d07fb57a..9f7d83105842f4 100644
--- a/app/javascript/flavours/glitch/features/notifications_v2/filter_bar.tsx
+++ b/app/javascript/flavours/glitch/features/notifications_v2/filter_bar.tsx
@@ -5,6 +5,7 @@ import { defineMessages, FormattedMessage, useIntl } from 'react-intl';
 
 import HomeIcon from '@/material-icons/400-24px/home-fill.svg?react';
 import InsertChartIcon from '@/material-icons/400-24px/insert_chart.svg?react';
+import MoodIcon from '@/material-icons/400-24px/mood.svg?react';
 import PersonAddIcon from '@/material-icons/400-24px/person_add.svg?react';
 import RepeatIcon from '@/material-icons/400-24px/repeat.svg?react';
 import ReplyAllIcon from '@/material-icons/400-24px/reply_all.svg?react';
@@ -24,6 +25,10 @@ const tooltips = defineMessages({
     id: 'notifications.filter.favourites',
     defaultMessage: 'Favorites',
   },
+  reactions: {
+    id: 'notifications.filter.reactions',
+    defaultMessage: 'Reactions',
+  },
   boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },
   polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },
   follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },
@@ -97,6 +102,14 @@ export const FilterBar: React.FC = () => {
         >
           <Icon id='star' icon={StarIcon} />
         </BarButton>
+        <BarButton
+          selectedFilter={selectedFilter}
+          type='reaction'
+          key='reaction'
+          title={intl.formatMessage(tooltips.reactions)}
+        >
+          <Icon id='react' icon={MoodIcon} />
+        </BarButton>
         <BarButton
           selectedFilter={selectedFilter}
           type='reblog'
diff --git a/app/javascript/flavours/glitch/models/notification_group.ts b/app/javascript/flavours/glitch/models/notification_group.ts
index a639578fe30ffc..6d27378c757901 100644
--- a/app/javascript/flavours/glitch/models/notification_group.ts
+++ b/app/javascript/flavours/glitch/models/notification_group.ts
@@ -33,6 +33,7 @@ interface BaseNotification<Type extends NotificationType>
 
 export type NotificationGroupFavourite =
   BaseNotificationWithStatus<'favourite'>;
+export type NotificationGroupReaction = BaseNotificationWithStatus<'reaction'>;
 export type NotificationGroupReblog = BaseNotificationWithStatus<'reblog'>;
 export type NotificationGroupStatus = BaseNotificationWithStatus<'status'>;
 export type NotificationGroupMention = BaseNotificationWithStatus<'mention'>;
@@ -84,6 +85,7 @@ export interface NotificationGroupAdminReport
 
 export type NotificationGroup =
   | NotificationGroupFavourite
+  | NotificationGroupReaction
   | NotificationGroupReblog
   | NotificationGroupStatus
   | NotificationGroupMention
@@ -134,6 +136,7 @@ export function createNotificationGroupFromJSON(
 
   switch (group.type) {
     case 'favourite':
+    case 'reaction':
     case 'reblog':
     case 'status':
     case 'mention':
@@ -206,6 +209,7 @@ export function createNotificationGroupFromNotificationJSON(
 
   switch (notification.type) {
     case 'favourite':
+    case 'reaction':
     case 'reblog':
     case 'status':
     case 'mention':
diff --git a/app/javascript/flavours/glitch/styles/components.scss b/app/javascript/flavours/glitch/styles/components.scss
index 6e809d802b4350..b74352a1e4ea2f 100644
--- a/app/javascript/flavours/glitch/styles/components.scss
+++ b/app/javascript/flavours/glitch/styles/components.scss
@@ -10827,6 +10827,10 @@ noscript {
     color: $gold-star;
   }
 
+  &--reaction &__icon {
+    color: $blurple-300;
+  }
+
   &--reblog &__icon {
     color: $valid-value-color;
   }
diff --git a/app/models/concerns/notification/groups.rb b/app/models/concerns/notification/groups.rb
index f902952c61354c..ce3094bb4ce56f 100644
--- a/app/models/concerns/notification/groups.rb
+++ b/app/models/concerns/notification/groups.rb
@@ -4,7 +4,7 @@ module Notification::Groups
   extend ActiveSupport::Concern
 
   # `set_group_key!` needs to be updated if this list changes
-  GROUPABLE_NOTIFICATION_TYPES = %i(favourite reblog follow admin.sign_up).freeze
+  GROUPABLE_NOTIFICATION_TYPES = %i(favourite reaction reblog follow admin.sign_up).freeze
   MAXIMUM_GROUP_SPAN_HOURS = 12
 
   included do
@@ -15,7 +15,7 @@ def set_group_key!
     return if filtered? || GROUPABLE_NOTIFICATION_TYPES.exclude?(type)
 
     type_prefix = case type
-                  when :favourite, :reblog
+                  when :favourite, :reaction, :reblog
                     [type, target_status&.id].join('-')
                   when :follow, :'admin.sign_up'
                     type
diff --git a/app/serializers/rest/notification_group_serializer.rb b/app/serializers/rest/notification_group_serializer.rb
index f4af842e38dca7..0ca9386a7ab3db 100644
--- a/app/serializers/rest/notification_group_serializer.rb
+++ b/app/serializers/rest/notification_group_serializer.rb
@@ -24,7 +24,7 @@ def status_id
   end
 
   def status_type?
-    [:favourite, :reblog, :status, :mention, :poll, :update].include?(object.type)
+    [:favourite, :reaction, :reblog, :status, :mention, :poll, :update].include?(object.type)
   end
 
   def report_type?

From 0fedd5fb2f35115ddbdef69dc5ba0bd0c4af0a79 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Wed, 24 Jul 2024 23:10:43 -0500
Subject: [PATCH 26/40] Fix reactions bar alignment in grouped notifications

---
 app/javascript/flavours/glitch/styles/components.scss | 1 +
 1 file changed, 1 insertion(+)

diff --git a/app/javascript/flavours/glitch/styles/components.scss b/app/javascript/flavours/glitch/styles/components.scss
index b74352a1e4ea2f..39d00ee506812d 100644
--- a/app/javascript/flavours/glitch/styles/components.scss
+++ b/app/javascript/flavours/glitch/styles/components.scss
@@ -11042,6 +11042,7 @@ noscript {
 
   .status__content,
   .status__action-bar,
+  .reactions-bar,
   .media-gallery,
   .video-player,
   .audio-player,

From 5f05c981bab3a7f0c3df0dff60184d71d6dd1695 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 4 Aug 2024 19:13:04 -0500
Subject: [PATCH 27/40] Fix reblog reactions being hydrated improperly

---
 app/lib/status_cache_hydrator.rb | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/app/lib/status_cache_hydrator.rb b/app/lib/status_cache_hydrator.rb
index 3bbd7d4d098d49..349f68b30768f4 100644
--- a/app/lib/status_cache_hydrator.rb
+++ b/app/lib/status_cache_hydrator.rb
@@ -61,7 +61,6 @@ def hydrate_reblog_payload(empty_payload, account_id, nested: false)
       payload[:filtered]   = payload[:reblog][:filtered]
       payload[:favourited] = payload[:reblog][:favourited]
       payload[:reblogged]  = payload[:reblog][:reblogged]
-      payload[:reactions]  = payload[:reblog][:reactions]
     end
   end
 
@@ -72,7 +71,7 @@ def fill_status_payload(payload, status, account_id, nested: false)
     payload[:bookmarked] = Bookmark.exists?(account_id: account_id, status_id: status.id)
     payload[:pinned]     = StatusPin.exists?(account_id: account_id, status_id: status.id) if status.account_id == account_id
     payload[:filtered]   = mapped_applied_custom_filter(account_id, status)
-    payload[:reactions]  = serialized_reactions(account_id)
+    payload[:reactions]  = serialized_reactions(account_id, status)
     payload[:quote] = hydrate_quote_payload(payload[:quote], status.quote, account_id, nested:) if payload[:quote]
   end
 
@@ -113,8 +112,8 @@ def serialized_filter(filter)
     ).as_json
   end
 
-  def serialized_reactions(account_id)
-    reactions = @status.reactions(account_id)
+  def serialized_reactions(account_id, status)
+    reactions = status.reactions(account_id)
     ActiveModelSerializers::SerializableResource.new(
       reactions,
       each_serializer: REST::ReactionSerializer,

From 3568a120f6adf097fc76395e9b3c1a4add118c8d Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Thu, 22 Aug 2024 12:22:36 -0500
Subject: [PATCH 28/40] Fix grouped reaction notification text

---
 .../components/notification_reaction.tsx      | 28 ++++++++++++++-----
 .../flavours/glitch/locales/en.json           |  1 +
 2 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/app/javascript/flavours/glitch/features/notifications_v2/components/notification_reaction.tsx b/app/javascript/flavours/glitch/features/notifications_v2/components/notification_reaction.tsx
index 95dd4d850a8ed4..0ec53234f8fb8e 100644
--- a/app/javascript/flavours/glitch/features/notifications_v2/components/notification_reaction.tsx
+++ b/app/javascript/flavours/glitch/features/notifications_v2/components/notification_reaction.tsx
@@ -6,13 +6,27 @@ import type { NotificationGroupReaction } from 'flavours/glitch/models/notificat
 import type { LabelRenderer } from './notification_group_with_status';
 import { NotificationGroupWithStatus } from './notification_group_with_status';
 
-const labelRenderer: LabelRenderer = (values) => (
-  <FormattedMessage
-    id='notification.reaction'
-    defaultMessage='{name} reacted to your status'
-    values={values}
-  />
-);
+const labelRenderer: LabelRenderer = (displayedName, total) => {
+  if (total === 1)
+    return (
+      <FormattedMessage
+        id='notification.reaction'
+        defaultMessage='{name} reacted to your status'
+        values={{ name: displayedName }}
+      />
+    );
+
+  return (
+    <FormattedMessage
+      id='notification.reaction.name_and_others'
+      defaultMessage='{name} and {count, plural, one {# other} other {# others}} reacted to your post'
+      values={{
+        name: displayedName,
+        count: total - 1,
+      }}
+    />
+  );
+};
 
 export const NotificationReaction: React.FC<{
   notification: NotificationGroupReaction;
diff --git a/app/javascript/flavours/glitch/locales/en.json b/app/javascript/flavours/glitch/locales/en.json
index 4251d2ccfeb568..1d0afc26eeae58 100644
--- a/app/javascript/flavours/glitch/locales/en.json
+++ b/app/javascript/flavours/glitch/locales/en.json
@@ -48,6 +48,7 @@
   "navigation_bar.keyboard_shortcuts": "Keyboard shortcuts",
   "navigation_bar.misc": "Misc",
   "notification.reaction": "{name} reacted to your post",
+  "notification.reaction.name_and_others": "{name} and {count, plural, one {# other} other {# others}} reacted to your post",
   "notifications.column_settings.filter_bar.show_bar": "Show filter bar",
   "notifications.column_settings.reaction": "Reactions:",
   "notifications.filter.reactions": "Reactions",

From 80020bc16c4aadc632b4115b8f7aa3155c67b089 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Fri, 13 Sep 2024 16:32:47 -0500
Subject: [PATCH 29/40] Make addReaction and removeReaction optional props

This prevents things from breaking with embeds.
---
 .../flavours/glitch/components/status_reactions.jsx  | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/app/javascript/flavours/glitch/components/status_reactions.jsx b/app/javascript/flavours/glitch/components/status_reactions.jsx
index 81443d20555e14..d750b5f23359d2 100644
--- a/app/javascript/flavours/glitch/components/status_reactions.jsx
+++ b/app/javascript/flavours/glitch/components/status_reactions.jsx
@@ -21,9 +21,9 @@ export default class StatusReactions extends ImmutablePureComponent {
     statusId: PropTypes.string.isRequired,
     reactions: ImmutablePropTypes.list.isRequired,
     numVisible: PropTypes.number,
-    addReaction: PropTypes.func.isRequired,
+    addReaction: PropTypes.func,
     canReact: PropTypes.bool.isRequired,
-    removeReaction: PropTypes.func.isRequired,
+    removeReaction: PropTypes.func,
   };
 
   willEnter() {
@@ -78,8 +78,8 @@ class Reaction extends ImmutablePureComponent {
   static propTypes = {
     statusId: PropTypes.string,
     reaction: ImmutablePropTypes.map.isRequired,
-    addReaction: PropTypes.func.isRequired,
-    removeReaction: PropTypes.func.isRequired,
+    addReaction: PropTypes.func,
+    removeReaction: PropTypes.func,
     canReact: PropTypes.bool.isRequired,
     style: PropTypes.object,
   };
@@ -91,9 +91,9 @@ class Reaction extends ImmutablePureComponent {
   handleClick = () => {
     const { reaction, statusId, addReaction, removeReaction } = this.props;
 
-    if (reaction.get('me')) {
+    if (reaction.get('me') && removeReaction) {
       removeReaction(statusId, reaction.get('name'));
-    } else {
+    } else if (addReaction) {
       addReaction(statusId, reaction.get('name'));
     }
   };

From 57c6de408f143d9e68a4792800617fc2ed19d2ce Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Thu, 3 Oct 2024 15:14:19 -0500
Subject: [PATCH 30/40] Align mail status check with upstream

---
 app/mailers/notification_mailer.rb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/mailers/notification_mailer.rb b/app/mailers/notification_mailer.rb
index 1a3ffceccd056e..5e7509671636ba 100644
--- a/app/mailers/notification_mailer.rb
+++ b/app/mailers/notification_mailer.rb
@@ -42,7 +42,7 @@ def favourite
   end
 
   def reaction
-    return unless @user.functional? && @status.present?
+    return if @status.blank?
 
     locale_for_account(@me) do
       mail subject: default_i18n_subject(name: @account.acct)

From f4e52ea5f90fbc0801a857451f30061230571273 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Thu, 7 Nov 2024 15:33:42 -0600
Subject: [PATCH 31/40] Fix invisible reactions on detailed statuses when
 logged out

---
 app/serializers/initial_state_serializer.rb | 1 +
 1 file changed, 1 insertion(+)

diff --git a/app/serializers/initial_state_serializer.rb b/app/serializers/initial_state_serializer.rb
index 9cd2dd9d8f216d..8e53ef1dcdd40d 100644
--- a/app/serializers/initial_state_serializer.rb
+++ b/app/serializers/initial_state_serializer.rb
@@ -132,6 +132,7 @@ def default_meta_store
       trends_as_landing_page: Setting.trends_as_landing_page,
       trends_enabled: Setting.trends,
       version: instance_presenter.version,
+      visible_reactions: Setting.visible_reactions,
       terms_of_service_enabled: TermsOfService.live.exists?,
     }
   end

From 4a22db888be454252df6ad069bbace2b06570e3e Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Tue, 26 Nov 2024 12:32:18 -0600
Subject: [PATCH 32/40] Fix status reactions not animating on hover when logged
 out

---
 .../flavours/glitch/components/status_reactions.jsx           | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/app/javascript/flavours/glitch/components/status_reactions.jsx b/app/javascript/flavours/glitch/components/status_reactions.jsx
index d750b5f23359d2..5d1fe8698f125f 100644
--- a/app/javascript/flavours/glitch/components/status_reactions.jsx
+++ b/app/javascript/flavours/glitch/components/status_reactions.jsx
@@ -89,7 +89,8 @@ class Reaction extends ImmutablePureComponent {
   };
 
   handleClick = () => {
-    const { reaction, statusId, addReaction, removeReaction } = this.props;
+    const { reaction, statusId, addReaction, removeReaction, canReact } = this.props;
+    if (!canReact) return;
 
     if (reaction.get('me') && removeReaction) {
       removeReaction(statusId, reaction.get('name'));
@@ -111,7 +112,6 @@ class Reaction extends ImmutablePureComponent {
         onClick={this.handleClick}
         onMouseEnter={this.handleMouseEnter}
         onMouseLeave={this.handleMouseLeave}
-        disabled={!this.props.canReact}
         style={this.props.style}
       >
         <span className='reactions-bar__item__emoji'>

From faf23ea5cea89fe0c9b692aee1aed9d46473967e Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Wed, 18 Dec 2024 15:40:30 -0600
Subject: [PATCH 33/40] Update status reaction emails

---
 .../images/mailer-new/heading/reaction.png    | Bin 1763 -> 5759 bytes
 .../notification_mailer/reaction.html.haml    |   5 ++++-
 .../notification_mailer/reaction.text.erb     |   2 +-
 3 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/app/javascript/images/mailer-new/heading/reaction.png b/app/javascript/images/mailer-new/heading/reaction.png
index 2e2969953ea48ce39b3fca7e1282717d04229a84..8cfb73c69ec3e468da17af6ec50a3d6d537aa98a 100644
GIT binary patch
literal 5759
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

literal 1763
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
N5OZUkQH239<}WIbu$uq?

diff --git a/app/views/notification_mailer/reaction.html.haml b/app/views/notification_mailer/reaction.html.haml
index 32427d58e5177f..0bca350f1d8fa8 100644
--- a/app/views/notification_mailer/reaction.html.haml
+++ b/app/views/notification_mailer/reaction.html.haml
@@ -1,5 +1,8 @@
 = content_for :heading do
-  = render 'application/mailer/heading', heading_title: t('notification_mailer.reaction.title'), heading_subtitle: t('notification_mailer.reaction.body', name: @account.pretty_acct), heading_image_url: frontend_asset_url('images/mailer-new/heading/reaction.png')
+  = render 'application/mailer/heading',
+           image_url: frontend_asset_url('images/mailer-new/heading/reaction.png'),
+           subtitle: t('notification_mailer.reaction.body', name: @status.account.pretty_acct),
+           title: t('notification_mailer.reaction.title')
 %table.email-w-full{ cellspacing: 0, cellpadding: 0, border: 0, role: 'presentation' }
   %tr
     %td.email-body-padding-td
diff --git a/app/views/notification_mailer/reaction.text.erb b/app/views/notification_mailer/reaction.text.erb
index fa30d708eaa33c..6efe7eba1d708c 100644
--- a/app/views/notification_mailer/reaction.text.erb
+++ b/app/views/notification_mailer/reaction.text.erb
@@ -1,5 +1,5 @@
 <%= raw t('application_mailer.salutation', name: display_name(@me)) %>
 
-<%= raw t('notification_mailer.reaction.body', name: @account.pretty_acct) %>
+<%= raw t('notification_mailer.reaction.body', name: @status.account.pretty_acct) %>
 
 <%= render 'status', status: @status %>

From 9a796f3a24feb313c63337abae01c61d12f82cb7 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 29 Dec 2024 00:06:41 -0600
Subject: [PATCH 34/40] Fix old migration

---
 db/migrate/20230215074425_move_emoji_reaction_settings.rb | 8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

diff --git a/db/migrate/20230215074425_move_emoji_reaction_settings.rb b/db/migrate/20230215074425_move_emoji_reaction_settings.rb
index 6d2d5e167ad9ca..789097117f7fb0 100644
--- a/db/migrate/20230215074425_move_emoji_reaction_settings.rb
+++ b/db/migrate/20230215074425_move_emoji_reaction_settings.rb
@@ -7,21 +7,19 @@ class User < ApplicationRecord; end
     setting_visible_reactions: 'visible_reactions',
   }.freeze
 
-  class LegacySetting < ApplicationRecord
-    self.table_name = 'settings'
-
+  class Setting < ApplicationRecord
     def var
       self[:var]&.to_sym
     end
 
     def value
-      YAML.safe_load(self[:value], permitted_classes: [ActiveSupport::HashWithIndifferentAccess]) if self[:value].present?
+      YAML.safe_load(self[:value], permitted_classes: [ActiveSupport::HashWithIndifferentAccess, Symbol]) if self[:value].present?
     end
   end
 
   def up
     User.find_in_batches do |users|
-      previous_settings_for_batch = LegacySetting.where(thing_type: 'User', thing_id: users.map(&:id)).group_by(&:thing_id)
+      previous_settings_for_batch = Setting.where(thing_type: 'User', thing_id: users.map(&:id)).group_by(&:thing_id)
 
       users.each do |user|
         previous_settings = previous_settings_for_batch[user.id]&.index_by(&:var) || {}

From 171eda2b868c97d3d3cb9cf098c2cdc067fb51ab Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Fri, 3 Jan 2025 17:10:04 -0600
Subject: [PATCH 35/40] Remove emoji reaction settings move migration

It's now broken and pointless due to the complete removal of legacy user settings. Since this effectively predates the current reaction branch as well, there is little chance that someone running an older iteration will need to use this migration.
---
 ...0215074425_move_emoji_reaction_settings.rb | 47 -------------------
 1 file changed, 47 deletions(-)
 delete mode 100644 db/migrate/20230215074425_move_emoji_reaction_settings.rb

diff --git a/db/migrate/20230215074425_move_emoji_reaction_settings.rb b/db/migrate/20230215074425_move_emoji_reaction_settings.rb
deleted file mode 100644
index 789097117f7fb0..00000000000000
--- a/db/migrate/20230215074425_move_emoji_reaction_settings.rb
+++ /dev/null
@@ -1,47 +0,0 @@
-# frozen_string_literal: true
-
-class MoveEmojiReactionSettings < ActiveRecord::Migration[6.1]
-  class User < ApplicationRecord; end
-
-  MAPPING = {
-    setting_visible_reactions: 'visible_reactions',
-  }.freeze
-
-  class Setting < ApplicationRecord
-    def var
-      self[:var]&.to_sym
-    end
-
-    def value
-      YAML.safe_load(self[:value], permitted_classes: [ActiveSupport::HashWithIndifferentAccess, Symbol]) if self[:value].present?
-    end
-  end
-
-  def up
-    User.find_in_batches do |users|
-      previous_settings_for_batch = Setting.where(thing_type: 'User', thing_id: users.map(&:id)).group_by(&:thing_id)
-
-      users.each do |user|
-        previous_settings = previous_settings_for_batch[user.id]&.index_by(&:var) || {}
-        user_settings = Oj.load(user.settings || '{}')
-        user_settings.delete('theme')
-
-        MAPPING.each do |legacy_key, new_key|
-          value = previous_settings[legacy_key]&.value
-
-          next if value.blank?
-
-          if value.is_a?(Hash)
-            value.each do |nested_key, nested_value|
-              user_settings[MAPPING[legacy_key][nested_key.to_sym]] = nested_value
-            end
-          else
-            user_settings[new_key] = value
-          end
-        end
-
-        user.update_column('settings', Oj.dump(user_settings))
-      end
-    end
-  end
-end

From cc710c753abf37d8f5a19468d641c19425364b47 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sat, 8 Feb 2025 14:22:11 -0600
Subject: [PATCH 36/40] Group reaction notifications by default

---
 app/javascript/flavours/glitch/actions/notification_groups.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/javascript/flavours/glitch/actions/notification_groups.ts b/app/javascript/flavours/glitch/actions/notification_groups.ts
index a1f872c3e367f8..6c6919d6e1d46e 100644
--- a/app/javascript/flavours/glitch/actions/notification_groups.ts
+++ b/app/javascript/flavours/glitch/actions/notification_groups.ts
@@ -71,7 +71,7 @@ function dispatchAssociatedRecords(
 }
 
 function selectNotificationGroupedTypes(state: RootState) {
-  const types: NotificationType[] = ['favourite', 'reblog'];
+  const types: NotificationType[] = ['favourite', 'reblog', 'reaction'];
 
   if (selectSettingsNotificationsGroupFollows(state)) types.push('follow');
 

From 60b5dd69e4dff48b34dba53581c15c64dd4bac25 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 30 Mar 2025 13:52:12 -0500
Subject: [PATCH 37/40] Migrate status reactions to react-spring

---
 .../glitch/components/status_reactions.jsx    | 117 +++++++++---------
 1 file changed, 60 insertions(+), 57 deletions(-)

diff --git a/app/javascript/flavours/glitch/components/status_reactions.jsx b/app/javascript/flavours/glitch/components/status_reactions.jsx
index 5d1fe8698f125f..b1e812739abb59 100644
--- a/app/javascript/flavours/glitch/components/status_reactions.jsx
+++ b/app/javascript/flavours/glitch/components/status_reactions.jsx
@@ -1,13 +1,12 @@
 import PropTypes from 'prop-types';
-import React from 'react';
+import { PureComponent, useMemo } from 'react';
 
 import classNames from 'classnames';
 
 import ImmutablePropTypes from 'react-immutable-proptypes';
 import ImmutablePureComponent from 'react-immutable-pure-component';
 
-import TransitionMotion from 'react-motion/lib/TransitionMotion';
-import spring from 'react-motion/lib/spring';
+import { animated, useTransition } from '@react-spring/web';
 
 import { unicodeMapping } from '../features/emoji/emoji_unicode_mapping_light';
 import { autoPlayGif, reduceMotion } from '../initial_state';
@@ -15,63 +14,64 @@ import { assetHost } from '../utils/config';
 
 import { AnimatedNumber } from './animated_number';
 
-export default class StatusReactions extends ImmutablePureComponent {
-
-  static propTypes = {
-    statusId: PropTypes.string.isRequired,
-    reactions: ImmutablePropTypes.list.isRequired,
-    numVisible: PropTypes.number,
-    addReaction: PropTypes.func,
-    canReact: PropTypes.bool.isRequired,
-    removeReaction: PropTypes.func,
-  };
-
-  willEnter() {
-    return { scale: reduceMotion ? 1 : 0 };
-  }
-
-  willLeave() {
-    return { scale: reduceMotion ? 0 : spring(0, { stiffness: 170, damping: 26 }) };
-  }
-
-  render() {
-    const { reactions, numVisible } = this.props;
-    let visibleReactions = reactions
+const StatusReactions = ({
+  statusId,
+  reactions,
+  numVisible,
+  addReaction,
+  canReact,
+  removeReaction,
+}) => {
+  const visibleReactions = useMemo(() => {
+    let visible = reactions
       .filter(x => x.get('count') > 0)
       .sort((a, b) => b.get('count') - a.get('count'));
 
     if (numVisible >= 0) {
-      visibleReactions = visibleReactions.filter((_, i) => i < numVisible);
+      visible = visible.filter((_, i) => i < numVisible);
     }
 
-    const styles = visibleReactions.map(reaction => ({
-      key: reaction.get('name'),
-      data: reaction,
-      style: { scale: reduceMotion ? 1 : spring(1, { stiffness: 150, damping: 13 }) },
-    })).toArray();
-
-    return (
-      <TransitionMotion styles={styles} willEnter={this.willEnter} willLeave={this.willLeave}>
-        {items => (
-          <div className={classNames('reactions-bar', { 'reactions-bar--empty': visibleReactions.isEmpty() })}>
-            {items.map(({ key, data, style }) => (
-              <Reaction
-                key={key}
-                statusId={this.props.statusId}
-                reaction={data}
-                style={{ transform: `scale(${style.scale})`, position: style.scale < 0.5 ? 'absolute' : 'static' }}
-                addReaction={this.props.addReaction}
-                removeReaction={this.props.removeReaction}
-                canReact={this.props.canReact}
-              />
-            ))}
-          </div>
-        )}
-      </TransitionMotion>
-    );
-  }
-
-}
+    return visible.toArray();
+  }, [numVisible, reactions]);
+
+  const transitions = useTransition(visibleReactions, {
+    from: {
+      scale: 0,
+    },
+    enter: {
+      scale: 1,
+    },
+    leave: {
+      scale: 0,
+    },
+    immediate: reduceMotion,
+    keys: visibleReactions.map(x => x.get('name')),
+  });
+
+  return (
+    <div className={classNames('reactions-bar', { 'reactions-bar--empty': visibleReactions.length === 0 })}>
+      {transitions(({ scale }, reaction) => (
+        <Reaction
+          key={reaction.get('name')}
+          statusId={statusId}
+          reaction={reaction}
+          style={{ transform: scale.to((s) => `scale(${s})`) }}
+          addReaction={addReaction}
+          removeReaction={removeReaction}
+          canReact={canReact}
+        />
+      ))}
+    </div>
+  );
+};
+StatusReactions.propTypes = {
+  statusId: PropTypes.string.isRequired,
+  reactions: ImmutablePropTypes.list.isRequired,
+  numVisible: PropTypes.number,
+  addReaction: PropTypes.func,
+  canReact: PropTypes.bool.isRequired,
+  removeReaction: PropTypes.func,
+};
 
 class Reaction extends ImmutablePureComponent {
 
@@ -107,7 +107,8 @@ class Reaction extends ImmutablePureComponent {
     const { reaction } = this.props;
 
     return (
-      <button
+      <animated.button
+        type='button'
         className={classNames('reactions-bar__item', { active: reaction.get('me') })}
         onClick={this.handleClick}
         onMouseEnter={this.handleMouseEnter}
@@ -125,13 +126,13 @@ class Reaction extends ImmutablePureComponent {
         <span className='reactions-bar__item__count'>
           <AnimatedNumber value={reaction.get('count')} />
         </span>
-      </button>
+      </animated.button>
     );
   }
 
 }
 
-class Emoji extends React.PureComponent {
+class Emoji extends PureComponent {
 
   static propTypes = {
     emoji: PropTypes.string.isRequired,
@@ -173,3 +174,5 @@ class Emoji extends React.PureComponent {
   }
 
 }
+
+export default StatusReactions;

From 70ff8247395db84a761be39195130cface085155 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 30 Mar 2025 22:23:04 -0500
Subject: [PATCH 38/40] Do not fade in emoji reactions on initial load

---
 app/javascript/flavours/glitch/components/status_reactions.jsx | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/app/javascript/flavours/glitch/components/status_reactions.jsx b/app/javascript/flavours/glitch/components/status_reactions.jsx
index b1e812739abb59..d974352f72cb0c 100644
--- a/app/javascript/flavours/glitch/components/status_reactions.jsx
+++ b/app/javascript/flavours/glitch/components/status_reactions.jsx
@@ -38,6 +38,9 @@ const StatusReactions = ({
     from: {
       scale: 0,
     },
+    initial: {
+      scale: 1,
+    },
     enter: {
       scale: 1,
     },

From a194f74bafdf82379d91d6362e24e37f2fb4e1b0 Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 18 May 2025 13:43:06 -0500
Subject: [PATCH 39/40] Add toot:Emoji and litepub:EmojiReact context
 extensions to reaction objects

---
 app/helpers/context_helper.rb                            | 1 +
 app/serializers/activitypub/emoji_reaction_serializer.rb | 2 ++
 2 files changed, 3 insertions(+)

diff --git a/app/helpers/context_helper.rb b/app/helpers/context_helper.rb
index 22d1964cae7b71..7c649303fc34a6 100644
--- a/app/helpers/context_helper.rb
+++ b/app/helpers/context_helper.rb
@@ -14,6 +14,7 @@ module ContextHelper
     moved_to: { 'movedTo' => { '@id' => 'as:movedTo', '@type' => '@id' } },
     also_known_as: { 'alsoKnownAs' => { '@id' => 'as:alsoKnownAs', '@type' => '@id' } },
     emoji: { 'toot' => 'http://joinmastodon.org/ns#', 'Emoji' => 'toot:Emoji' },
+    emoji_react: { 'litepub' => 'http://litepub.social/ns#', 'EmojiReact' => 'litepub:EmojiReact' },
     featured: { 'toot' => 'http://joinmastodon.org/ns#', 'featured' => { '@id' => 'toot:featured', '@type' => '@id' }, 'featuredTags' => { '@id' => 'toot:featuredTags', '@type' => '@id' } },
     property_value: { 'schema' => 'http://schema.org#', 'PropertyValue' => 'schema:PropertyValue', 'value' => 'schema:value' },
     atom_uri: { 'ostatus' => 'http://ostatus.org#', 'atomUri' => 'ostatus:atomUri' },
diff --git a/app/serializers/activitypub/emoji_reaction_serializer.rb b/app/serializers/activitypub/emoji_reaction_serializer.rb
index f8887f15b7121e..cfb5784af5a51b 100644
--- a/app/serializers/activitypub/emoji_reaction_serializer.rb
+++ b/app/serializers/activitypub/emoji_reaction_serializer.rb
@@ -1,6 +1,8 @@
 # frozen_string_literal: true
 
 class ActivityPub::EmojiReactionSerializer < ActivityPub::Serializer
+  context_extensions :emoji, :emoji_react
+
   attributes :id, :type, :actor, :content
   attribute :virtual_object, key: :object
   attribute :custom_emoji, key: :tag, unless: -> { object.custom_emoji.nil? }

From a353fea08c9b5d3efa8116233e99ac22f7a349fe Mon Sep 17 00:00:00 2001
From: Essem <smswessem@gmail.com>
Date: Sun, 1 Jun 2025 15:35:07 -0500
Subject: [PATCH 40/40] Fix reaction notifications in web UI

---
 .../glitch/features/notifications/components/notification.jsx   | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/javascript/flavours/glitch/features/notifications/components/notification.jsx b/app/javascript/flavours/glitch/features/notifications/components/notification.jsx
index 9cc605ba631a58..b7208708cefaa7 100644
--- a/app/javascript/flavours/glitch/features/notifications/components/notification.jsx
+++ b/app/javascript/flavours/glitch/features/notifications/components/notification.jsx
@@ -206,7 +206,7 @@ class Notification extends ImmutablePureComponent {
 
   renderReaction (notification) {
     return (
-      <StatusContainer
+      <StatusQuoteManager
         containerId={notification.get('id')}
         hidden={!!this.props.hidden}
         id={notification.get('status')}
